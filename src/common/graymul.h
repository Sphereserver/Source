// Define resources in the MUL files.
#ifndef _INC_GRAYMUL_H
#define _INC_GRAYMUL_H
#pragma once

//---------------------------MUL FILE DEFS---------------------------

// All these structures must be BYTE packed.
#if defined _WIN32 && (!__MINGW32__)
// Microsoft dependant pragma
#pragma pack(1)
#define PACK_NEEDED
#else
// GCC based compiler you can add:
#define PACK_NEEDED __attribute__ ((packed))
#endif

// NOTE: !!! ALL Multi bytes in file ASSUME big endian !!!!

#define UO_MAP_VIEW_SIGHT	14	// True max sight distance of creatures is 14
#define UO_MAP_VIEW_SIZE	18	// Visibility for normal items
#define UO_MAP_VIEW_RADAR	31	// Visibility for castles, keeps and boats

////////////////////////////////////////////////////////////////////////
// Shared enum types.

// 20 colors of 10 hues and 5 brightnesses, which gives us 1000 colors.
//  plus black, and default.
// Skin color is similar, except there are 7 basic colors of 8 hues.
// For hair there are 7 colors of 7 hues.
typedef WORD HUE_TYPE;		// Index into the hues.mul table.

enum HUE_CODE
{
	HUE_DEFAULT			= 0x0000,

	HUE_BLUE_LOW		= 0x0002,	// lowest dyeable color.
	HUE_BLUE_NAVY		= 0x0003,
	HUE_RED_DARK		= 0x0020,
	HUE_RED				= 0x0022,
	HUE_ORANGE			= 0x002b,
	HUE_YELLOW			= 0x0035,
	HUE_GREEN_LIGHT		= 0x0040,

	HUE_BLUE_DARK		= 0x0061,
	HUE_BLUE			= 0x0062,
	HUE_BLUE_LIGHT		= 0x0063,

	HUE_GRAY_DARK		= 0x0386,	// gray range.
	HUE_GRAY			= 0x0387,
	HUE_GRAY_LIGHT		= 0x0388,

	HUE_TEXT_DEF		= 0x03b2,	// light gray color.

	HUE_DYE_HIGH		= 0x03e9,	// highest dyeable color = 1001

	HUE_SKIN_LOW		= 0x03EA,
	HUE_SKIN_HIGH		= 0x0422,

	// Strange mixed colors.
	HUE_HAIR_LOW		= 0x044e,	// valorite
	HUE_WHITE			= 0x0481,	// white....yup! a REAL white...
	HUE_STONE			= 0x0482,	// kinda like rock when you do it to a monster.....mabey for the Stone Harpy?
	HUE_HAIR_HIGH		= 0x04ad,
 
	HUE_GARGSKIN_LOW	= 0x06DB,	// lowest gargoyle skin color
	HUE_GARGSKIN_HIGH	= 0x06F3,	// highest

	HUE_MASK_LO			= 0x07FF,	// mask for items. (not really a valid thing to do i know)

	HUE_QTY				= 3000,	// 0x0bb8 Number of valid colors in hue table.
	HUE_MASK_HI			= 0x0FFF,

	HUE_TRANSLUCENT		= 0x4000,	// almost invis. may crash if not equipped ?
	HUE_UNDERWEAR		= 0x8000	// Only can be used on humans.
};

typedef WORD SOUND_TYPE;	// Sound ID

enum SOUND_CODE
{

	SOUND_NONE			= 0,
	SOUND_ANVIL			= 0x02a,

	SOUND_TURN_PAGE		= 0x055,	// open spellbook
	SOUND_SPELL_FIZZLE	= 0x05C,
	SOUND_OPEN_METAL	= 0x0ec,		// open bank box.

	SOUND_HOOF_MARBLE_1	= 0x121,		// marble echoing sound. (horse)
	SOUND_HOOF_MARBLE_2	= 0x122,
	SOUND_HOOF_BRIDGE_1 = 0x123,
	SOUND_HOOF_BRIDGE_2 = 0x124,
	SOUND_HOOF_DIRT_1	= 0x125,
	SOUND_HOOF_DIRT_2	= 0x126,
	SOUND_HOOF_QUIET_1	= 0x129, // quiet
	SOUND_HOOF_QUIET_2	= 0x12a, // quiet, horse run on grass.

	SOUND_FEET_STONE_1	= 0x12b,	// on stone (default)
	SOUND_FEET_STONE_2	= 0x12c,
	SOUND_FEET_GRASS_1	= 0x12d,
	SOUND_FEET_GRASS_2	= 0x12e,
	SOUND_FEET_PAVE_1	= 0x12f,		// on slate sound
	SOUND_FEET_PAVE_2	= 0x130,

	SOUND_HIT_10		= 0x013e,

	SOUND_GHOST_1		= 382,
	SOUND_GHOST_2,
	SOUND_GHOST_3,
	SOUND_GHOST_4,
	SOUND_GHOST_5,

	SOUND_SWORD_1		= 0x023b,
	SOUND_SWORD_7		= 0x023c,

	SOUND_SNIP			= 0x248,

	SOUND_QTY			= 0x300
};

typedef WORD MIDI_TYPE;	// Music id

#define MULTI_QTY	0x2000	// total address space for multis.
typedef WORD MULTI_TYPE;	// define a multi (also defined by ITEMID_MULTI)

enum ITEMID_TYPE	// InsideUO is great for this stuff.
{
	ITEMID_NOTHING		= 0x0000,	// Used for lightning.
	ITEMID_NODRAW = 1,
	ITEMID_ANKH_S,
	ITEMID_ANKH_N,
	ITEMID_ANKH_W,
	ITEMID_ANKH_E,

	ITEMID_STONE_WALL			= 0x0080,

	ITEMID_DOOR_SECRET_1		= 0x00E8,
	ITEMID_DOOR_SECRET_2		= 0x0314,
	ITEMID_DOOR_SECRET_3		= 0x0324,
	ITEMID_DOOR_SECRET_4		= 0x0334,
	ITEMID_DOOR_SECRET_5		= 0x0344,
	ITEMID_DOOR_SECRET_6		= 0x0354,

	ITEMID_DOOR_METAL_S			= 0x0675,	// 1
	ITEMID_DOOR_METAL_S_2		= 0x0677,
	ITEMID_DOOR_METAL_S_3		= 0x067D,
	ITEMID_DOOR_BARRED			= 0x0685,	// 2
	ITEMID_DOOR_RATTAN			= 0x0695,	// 3
	ITEMID_DOOR_WOODEN_1		= 0x06A5,	// 4
	ITEMID_DOOR_WOODEN_1_o		= 0x06A6,	// 4
	ITEMID_DOOR_WOODEN_1_2		= 0x06A7,
	ITEMID_DOOR_WOODEN_2		= 0x06B5,	// 5
	ITEMID_DOOR_METAL_L			= 0x06C5,	// 6
	ITEMID_DOOR_WOODEN_3		= 0x06D5,	// 7
	ITEMID_DOOR_WOODEN_4		= 0x06E5,	// 8
	ITEMID_DOOR_HI				= 0x06f4,

	ITEMID_DOOR_IRONGATE_1		= 0x0824,
	ITEMID_DOOR_WOODENGATE_1	= 0x0839,
	ITEMID_DOOR_IRONGATE_2		= 0x084C,
	ITEMID_DOOR_WOODENGATE_2	= 0x0866,

	ITEMID_ROCK_1_LO		= 0x8e0,
	ITEMID_ROCK_1_HI		= 0x8ea,

	ITEMID_BEEHIVE			= 0x091a,

	ITEMID_FOOD_BACON	 = 0x0976,
	ITEMID_FOOD_FISH_RAW = 0x97a,
	ITEMID_FOOD_FISH	= 0x097b,

	ITEMID_RBASKET		= 0x0990,	//0x0E78,

	ITEMID_BOOZE_LIQU_B1 = 0x099b,
	ITEMID_BOOZE_LIQU_B2 = 0x099c,
	ITEMID_BOOZE_LIQU_B3 = 0x099d,
	ITEMID_BOOZE_LIQU_B4 = 0x099e,
	ITEMID_BOOZE_ALE_B1 = 0x099f,
	ITEMID_BOOZE_ALE_B2 = 0x09a0,
	ITEMID_BOOZE_ALE_B3 = 0x09a1,
	ITEMID_BOOZE_ALE_B4 = 0x09a2,

	ITEMID_PITCHER		= 0x09a7,	// empty.
	ITEMID_BOX_METAL    = 0x09a8,
	ITEMID_CRATE7		= 0x09a9,
	ITEMID_BOX_WOOD1	= 0x09aa,
	ITEMID_CHEST_SILVER2= 0x09ab,
	ITEMID_BASKET		= 0x09ac,
	ITEMID_POUCH2		= 0x09b0,
	ITEMID_BASKET2		= 0x09b1,
	ITEMID_BANK_BOX		= 0x09b2, // another pack really but used as bank box.

	ITEMID_FOOD_EGGS_RAW	= 0x09b5,
	ITEMID_FOOD_EGGS		= 0x09b6,
	ITEMID_FOOD_BIRD1		= 0x09b7,
	ITEMID_FOOD_BIRD2		= 0x09b8,
	ITEMID_FOOD_BIRD1_RAW	= 0x09b9,
	ITEMID_FOOD_BIRD2_RAW	= 0x09ba,

	ITEMID_FOOD_SAUSAGE = 0x09c0,
	ITEMID_BOOZE_WINE_B1	= 0x09c4,
	ITEMID_BOOZE_WINE_B2	= 0x09c5,
	ITEMID_BOOZE_WINE_B3	= 0x09c6,
	ITEMID_BOOZE_WINE_B4	= 0x09c7,

	ITEMID_FOOD_HAM		= 0x09C9,

	ITEMID_FISH_1		= 0x09CC,
	ITEMID_FISH_2		= 0x09CD,
	ITEMID_FISH_3		= 0x09CE,
	ITEMID_FISH_4		= 0x09CF,

	ITEMID_FRUIT_APPLE	= 0x09d0,
	ITEMID_FRUIT_PEACH1	= 0x09d2,
	ITEMID_FRUIT_GRAPE	= 0x09d7,

	ITEMID_FOOD_CAKE		= 0x09e9,

	ITEMID_JAR_HONEY		= 0x09EC,
	ITEMID_BOOZE_ALE_M1		= 0x09ee,
	ITEMID_BOOZE_ALE_M2		= 0x09ef,

	ITEMID_FOOD_MEAT_RAW	= 0x09f1,
	ITEMID_FOOD_MEAT		= 0x09f2,

	ITEMID_LANTERN			= 0x0A25,

	ITEMID_BEDROLL_O_EW	= 0x0a55,
	ITEMID_BEDROLL_O_NS,
	ITEMID_BEDROLL_C,
	ITEMID_BEDROLL_C_NS,
	ITEMID_BEDROLL_C_EW	= 0x0a59,

	ITEMID_BED1_1			= 0x0a5a,
	// some things in here are not bed but sheets and blankets.
	ITEMID_BED1_X			= 0x0a91,

	ITEMID_BOOKSHELF1		= 0x0a97, // book shelf
	ITEMID_BOOKSHELF2		= 0x0a98, // book shelf
	ITEMID_BOOKSHELF3		= 0x0a99, // book shelf
	ITEMID_BOOKSHELF4		= 0x0a9a, // book shelf
	ITEMID_BOOKSHELF5		= 0x0a9b, // book shelf
	ITEMID_BOOKSHELF6		= 0x0a9c, // book shelf
	ITEMID_BOOKSHELF7		= 0x0a9d, // book shelf
	ITEMID_BOOKSHELF8		= 0x0a9e, // book shelf

	ITEMID_WATER_TROUGH_1	= 0x0B41,
	ITEMID_WATER_TROUGH_2	= 0x0B44,

	ITEMID_PLANT_COTTON1	= 0x0c4f,// old
	ITEMID_PLANT_COTTON2	= 0x0c50,
	ITEMID_PLANT_COTTON3	= 0x0c51,
	ITEMID_PLANT_COTTON4	= 0x0c52,
	ITEMID_PLANT_COTTON5	= 0x0c53,
	ITEMID_PLANT_COTTON6	= 0x0c54,// young
	ITEMID_PLANT_WHEAT1	= 0x0c55,
	ITEMID_PLANT_WHEAT2	= 0x0c56,
	ITEMID_PLANT_WHEAT3	= 0x0c57,
	ITEMID_PLANT_WHEAT4	= 0x0c58,
	ITEMID_PLANT_WHEAT5	= 0x0c59,
	ITEMID_PLANT_WHEAT6	= 0x0c5a,
	ITEMID_PLANT_WHEAT7	= 0x0c5b,

	ITEMID_PLANT_VINE1	= 0x0c5e,
	ITEMID_PLANT_VINE2	= 0x0c5f,
	ITEMID_PLANT_VINE3	= 0x0c60,

	ITEMID_PLANT_TURNIP1	= 0x0c61,
	ITEMID_PLANT_TURNIP2	= 0x0c62,
	ITEMID_PLANT_TURNIP3	= 0x0c63,
	ITEMID_SPROUT_NORMAL	= 0x0c68,
	ITEMID_PLANT_ONION	= 0x0c6f,
	ITEMID_PLANT_CARROT	= 0x0c76,
	ITEMID_PLANT_CORN1	= 0x0c7d,
	ITEMID_PLANT_CORN2	= 0x0c7e,

	ITEMID_FRUIT_WATERMELLON1		= 0x0c5c,
	ITEMID_FRUIT_WATERMELLON2		= 0x0c5d,
	ITEMID_FRUIT_GOURD1	= 0x0c64,
	ITEMID_FRUIT_GOURD2	= 0x0c65,
	ITEMID_FRUIT_GOURD3	= 0x0c66,
	ITEMID_FRUIT_GOURD4	= 0x0c67,
	ITEMID_SPROUT_NORMAL2= 0x0c69,
	ITEMID_FRUIT_ONIONS1	= 0x0c6d,
	ITEMID_FRUIT_ONIONS2	= 0x0c6e,
	ITEMID_FRUIT_PUMPKIN1= 0x0c6a,
	ITEMID_FRUIT_PUMPKIN2= 0x0c6b,
	ITEMID_FRUIT_PUMPKIN3= 0x0c6c,
	ITEMID_FRUIT_LETTUCE1= 0x0c70,
	ITEMID_FRUIT_LETTUCE2= 0x0c71,
	ITEMID_FRUIT_SQUASH1	= 0x0c72,
	ITEMID_FRUIT_SQUASH2	= 0x0c73,
	ITEMID_FRUIT_HONEYDEW_MELLON1	= 0x0c74,
	ITEMID_FRUIT_HONEYDEW_MELLON2	= 0x0c75,
	ITEMID_FRUIT_CARROT1	= 0x0c77,
	ITEMID_FRUIT_CARROT2	= 0x0c78,
	ITEMID_FRUIT_CANTALOPE1			= 0x0c79,
	ITEMID_FRUIT_CANTALOPE2			= 0x0c7a,
	ITEMID_FRUIT_CABBAGE1= 0x0c7b,
	ITEMID_FRUIT_CABBAGE2= 0x0c7c,
	ITEMID_FRUIT_CORN1	= 0x0c7f,
	ITEMID_FRUIT_CORN2	= 0x0c80,
	ITEMID_FRUIT_CORN3	= 0x0c81,
	ITEMID_FRUIT_CORN4	= 0x0c82,

	ITEMID_TREE_COCONUT	= 0x0c95,
	ITEMID_TREE_DATE		= 0x0c96,

	ITEMID_TREE_BANANA1	= 0x0ca8,
	ITEMID_TREE_BANANA2	= 0x0caa,
	ITEMID_TREE_BANANA3	= 0x0cab,

	ITEMID_TREE_LO			= 0x0cca,
	ITEMID_TREE_HI			= 0x0ce8,

	ITEMID_PLANT_GRAPE	= 0x0d1a,	// fruit
	ITEMID_PLANT_GRAPE1	= 0x0d1b,
	ITEMID_PLANT_GRAPE2	= 0x0d1c,
	ITEMID_PLANT_GRAPE3	= 0x0d1d,
	ITEMID_PLANT_GRAPE4	= 0x0d1e,
	ITEMID_PLANT_GRAPE5	= 0x0d1f,
	ITEMID_PLANT_GRAPE6	= 0x0d20,
	ITEMID_PLANT_GRAPE7	= 0x0d21,
	ITEMID_PLANT_GRAPE8	= 0x0d22,
	ITEMID_PLANT_GRAPE9	= 0x0d23,
	ITEMID_PLANT_GRAPE10	= 0x0d24,

	ITEMID_FRUIT_TURNIP1	= 0x0d39,
	ITEMID_FRUIT_TURNIP2	= 0x0d3a,

	ITEMID_TREE2_LO = 0xd41,
	ITEMID_TREE2_HI = 0xd44,

	ITEMID_TREE3_LO = 0x0d57,
	ITEMID_TREE3_HI = 0x0d5b,

	ITEMID_TREE4_LO = 0x0d6e,
	ITEMID_TREE4_HI = 0x0d72,

	ITEMID_TREE5_LO = 0x0d84,
	ITEMID_TREE5_HI = 0x0d86,

	ITEMID_TREE_APPLE_BARK1	= 0x0d94,
	ITEMID_TREE_APPLE_EMPTY1= 0x0d95,
	ITEMID_TREE_APPLE_FULL1	= 0x0d96,
	ITEMID_TREE_APPLE_FALL1	= 0x0d97,
	ITEMID_TREE_APPLE_BARK2	= 0x0d98,
	ITEMID_TREE_APPLE_EMPTY2= 0x0d99,
	ITEMID_TREE_APPLE_FULL2	= 0x0d9a,
	ITEMID_TREE_APPLE_FALL2	= 0x0d9b,
	ITEMID_TREE_PEACH_BARK1	= 0x0d9c,
	ITEMID_TREE_PEACH_EMPTY1= 0x0d9d,
	ITEMID_TREE_PEACH_FULL1	= 0x0d9e,
	ITEMID_TREE_PEACH_FALL1	= 0x0d9f,
	ITEMID_TREE_PEACH_BARK2	= 0x0da0,
	ITEMID_TREE_PEACH_EMPTY2= 0x0da1,
	ITEMID_TREE_PEACH_FULL2	= 0x0da2,
	ITEMID_TREE_PEACH_FALL2	= 0x0da3,
	ITEMID_TREE_PEAR_BARK1	= 0x0da4,
	ITEMID_TREE_PEAR_EMPTY1	= 0x0da5,
	ITEMID_TREE_PEAR_FULL1	= 0x0da6,
	ITEMID_TREE_PEAR_FALL1	= 0x0da7,
	ITEMID_TREE_PEAR_BARK2	= 0x0da8,
	ITEMID_TREE_PEAR_EMPTY2	= 0x0da9,
	ITEMID_TREE_PEAR_FULL2	= 0x0daa,
	ITEMID_TREE_PEAR_FALL2	= 0x0dab,

	ITEMID_PLANT_WHEAT8	= 0x0dae,
	ITEMID_PLANT_WHEAT9	= 0x0daf,

	ITEMID_SIGN_BRASS_1		= 0x0bd1,
	ITEMID_SIGN_BRASS_2		= 0x0bd2,

	ITEMID_BED2_1			= 0x0db0,
	ITEMID_BED2_5			= 0x0db5,

	ITEMID_FISH_POLE1	= 0x0dbf,
	ITEMID_FISH_POLE2	= 0x0dc0,

	ITEMID_MOONGATE_RED	= 0x0dda,

	ITEMID_FRUIT_COTTON	= 0x0def,
	ITEMID_SCISSORS1	= 0x0dfc,
	ITEMID_SCISSORS2	= 0x0dfd,

	ITEMID_KINDLING1	= 0x0de1,
	ITEMID_KINDLING2	= 0x0de2,
	ITEMID_CAMPFIRE		= 0x0de3,
	ITEMID_EMBERS		= 0x0de9,

	ITEMID_WAND			= 0x0df2,

	ITEMID_COTTON_RAW	= 0x0def,
	ITEMID_WOOL			= 0x0df8,
	ITEMID_COTTON		= 0x0df9,
	ITEMID_FEATHERS2a	= 0x0dfa,
	ITEMID_FEATHERS2b	= 0x0dfb,

	ITEMID_GAME_BACKGAM = 0x0e1c,
	ITEMID_YARN1		= 0x0e1d,
	ITEMID_YARN2		= 0x0e1e,
	ITEMID_YARN3		= 0x0e1f,

	ITEMID_BANDAGES_BLOODY1 = 0x0e20,
	ITEMID_BANDAGES1		= 0x0e21,	// clean
	ITEMID_BANDAGES_BLOODY2 = 0x0e22,

	ITEMID_EMPTY_VIAL	= 0x0e24,
	ITEMID_BOTTLE1_1	= 0x0e25,
	ITEMID_BOTTLE1_DYE	= 0x0e27,
	ITEMID_BOTTLE1_8	= 0x0e2c,

	ITEMID_CRYSTAL_BALL1 = 0x0e2d,
	ITEMID_CRYSTAL_BALL4 = 0x0e30,

	ITEMID_SCROLL2_BLANK= 0x0e34,
	ITEMID_SCROLL2_B1	= 0x0e35,
	ITEMID_SCROLL2_B6	= 0x0e3a,
	ITEMID_SPELLBOOK2	= 0x0E3b,	// ??? looks like a spellbook but doesn open corectly !

	ITEMID_CRATE1		= 0x0e3c,	// n/s
	ITEMID_CRATE2		= 0x0e3d,	// e/w
	ITEMID_CRATE3		= 0x0e3e,
	ITEMID_CRATE4		= 0x0e3f,

	ITEMID_CHEST_METAL2_1 = 0x0e40,
	ITEMID_CHEST_METAL2_2 = 0x0e41,	// 2 tone chest.
	ITEMID_CHEST3		= 0x0e42,
	ITEMID_CHEST4		= 0x0e43,

	ITEMID_Cannon_Ball	= 0x0e73,
	ITEMID_Cannon_Balls	= 0x0e74,
	ITEMID_BACKPACK		= 0x0E75,	// containers.
	ITEMID_BAG			= 0x0E76,
	ITEMID_BARREL		= 0x0E77,
	ITEMID_BASIN		= 0x0e78,
	ITEMID_POUCH		= 0x0E79,
	ITEMID_SBASKET		= 0x0E7A,	// picknick basket
	ITEMID_CHEST_SILVER	= 0x0E7C,	// all grey. BANK BOX
	ITEMID_BOX_WOOD2	= 0x0E7D,
	ITEMID_CRATE5		= 0x0E7E,
	ITEMID_KEG			= 0x0E7F,
	ITEMID_BRASSBOX		= 0x0E80,

	ITEMID_HERD_CROOK1	= 0x0E81,	// Shepherds Crook
	ITEMID_HERD_CROOK2	= 0x0e82,
	ITEMID_Pickaxe1		= 0x0e85,
	ITEMID_Pickaxe2		= 0x0e86,
	ITEMID_Pitchfork	= 0x0e87,

	ITEMID_Cannon_N_1	= 0x0e8b,
	ITEMID_Cannon_N_3	= 0x0e8d,
	ITEMID_Cannon_W_1	= 0x0e8e,
	ITEMID_Cannon_W_3	= 0x0e90,
	ITEMID_Cannon_S_1	= 0x0e91,
	ITEMID_Cannon_S_3	= 0x0e93,
	ITEMID_Cannon_E_1	= 0x0e94,
	ITEMID_Cannon_E_3	= 0x0e96,

	ITEMID_MORTAR		= 0x0e9b,

	ITEMID_MUSIC_DRUM	= 0x0e9c,
	ITEMID_MUSIC_TAMB1,
	ITEMID_MUSIC_TAMB2,

	ITEMID_BBOARD_MSG	= 0x0eb0,	// a message on the bboard

	ITEMID_MUSIC_HARP_S	= 0x0eb1,
	ITEMID_MUSIC_HARP_L,
	ITEMID_MUSIC_LUTE1,
	ITEMID_MUSIC_LUTE2,

	ITEMID_SKELETON_1	= 0x0eca,
	ITEMID_SKELETON_2,
	ITEMID_SKELETON_3,
	ITEMID_SKELETON_4,
	ITEMID_SKELETON_5,
	ITEMID_SKELETON_6,
	ITEMID_SKELETON_7,
	ITEMID_SKELETON_8,
	ITEMID_SKELETON_9,

	ITEMID_GUILDSTONE1	= 0x0edd,
	ITEMID_GUILDSTONE2	= 0x0ede,

	ITEMID_WEB1_1		= 0x0ee3,
	ITEMID_WEB1_2		= 0x0ee4,
	ITEMID_WEB1_3		= 0x0ee5,
	ITEMID_WEB1_4		= 0x0ee6,

	ITEMID_BANDAGES2	= 0x0ee9,	// clean
	ITEMID_COPPER_C1	= 0x0eea,
	ITEMID_GOLD_C1		= 0x0eed,	// big pile
	ITEMID_SILVER_C1	= 0x0ef0,
	ITEMID_SILVER_C3	= 0x0ef2,

	ITEMID_SCROLL1_BLANK= 0x0ef3,
	ITEMID_SCROLL1_B1	= 0x0ef4,
	ITEMID_SCROLL1_B6	= 0x0ef9,
	ITEMID_SPELLBOOK	= 0x0efa,

	ITEMID_BOTTLE2_1	= 0x0efb,
	ITEMID_BOTTLE2_DYE	= 0x0eff,
	ITEMID_BOTTLE2_10	= 0x0f04,

	ITEMID_POTION_BLACK	= 0x0f06,
	ITEMID_POTION_ORANGE,
	ITEMID_POTION_BLUE,
	ITEMID_POTION_WHITE,
	ITEMID_POTION_GREEN,
	ITEMID_POTION_RED,
	ITEMID_POTION_YELLOW,
	ITEMID_POTION_PURPLE= 0x0f0d,
	ITEMID_EMPTY_BOTTLE = 0x0f0e,

	ITEMID_GEM1			= 0x0f0f,
	ITEMID_GEMS			= 0x0F20,
	ITEMID_GEML			= 0x0F30,

	ITEMID_HAY			= 0x0f36,	// sheif of hay.

	ITEMID_Shovel1		= 0x0f39,
	ITEMID_Shovel2		= 0x0f3a,
	ITEMID_Dung1		= 0x0f3b,
	ITEMID_Dung2		= 0x0f3c,

	ITEMID_FRUIT_HAY1		= 0x0f36,
	ITEMID_Arrow		= 0x0f3f,	// Need these to use a bow.
	ITEMID_ArrowX       = 0x0f42,
	ITEMID_DAGGER		= 0x0F51,

	ITEMID_MOONGATE_BLUE	= 0x0f6c,
	ITEMID_REAG_1		= 0x0f78,	// batwing

	ITEMID_REAG_BP		= 0x0f7a,	// black pearl.
	ITEMID_REAG_BM		= 0x0f7b,	//'Blood Moss'
	ITEMID_REAG_GA		= 0x0f84,	//'Garlic'
	ITEMID_REAG_GI		= 0x0f85,	//'Ginseng'
	ITEMID_REAG_MR		= 0x0f86,	//'Mandrake Root'
	ITEMID_REAG_NS		= 0x0f88,	//'Nightshade'
	ITEMID_REAG_SA		= 0x0f8c,	//'Sulfurous Ash'
	ITEMID_REAG_SS		= 0x0f8d,	//'Spider's Silk'

	ITEMID_REAG_26		= 0x0f91,	// Worms heart

	ITEMID_CLOTH_BOLT1	= 0x0f95,
	ITEMID_CLOTH_BOLT8	= 0x0f9c,
	ITEMID_SEWINGKIT	= 0x0f9d,
	ITEMID_SCISSORS3	= 0x0f9e,
	ITEMID_SCISSORS4	= 0x0f9f,
	ITEMID_THREAD1		= 0x0fa0,
	ITEMID_THREAD2		= 0x0fa1,

	ITEMID_GAME_BOARD	= 0x0fa6,
	ITEMID_GAME_DICE	= 0x0fa7,

	ITEMID_DYE			= 0x0FA9,
	ITEMID_DYEVAT		= 0x0FAB,
	ITEMID_GAME_BACKGAM_2 = 0x0fad,
	ITEMID_BARREL_2		= 0x0FAE,
	ITEMID_ANVIL1		= 0x0FAF,
	ITEMID_ANVIL2		= 0x0FB0,
	ITEMID_FORGE_1		= 0x0FB1,

	ITEMID_BOOK1		= 0x0fbd,
	ITEMID_BOOK2		= 0x0fbe,

	ITEMID_BOOK3		= 0x0fef,
	ITEMID_BOOK8		= 0x0ff4,

	ITEMID_PITCHER_WATER = 0x0ff8,

	ITEMID_ARCHERYBUTTE_E	= 0x100a,
	ITEMID_ARCHERYBUTTE_S	= 0x100b,

	ITEMID_FRUIT_HAY2		= 0x100c,
	ITEMID_FRUIT_HAY3		= 0x100d,

	ITEMID_KEY_COPPER	= 0x100e,
	// ...
	ITEMID_KEY_RING0	= 0x1011,
	ITEMID_KEY_MAGIC	= 0x1012,
	ITEMID_KEY_RUSTY	= 0x1013,

	ITEMID_SPINWHEEL1	= 0x1015,
	ITEMID_SPINWHEEL2	= 0x1019,
	ITEMID_WOOL2		= 0x101f,

	ITEMID_SHAFTS3a		= 0x1024,
	ITEMID_SHAFTS3b		= 0x1025,

	ITEMID_CHISELS_1	= 0x1026,
	ITEMID_CHISELS_2	= 0x1027,
	ITEMID_DOVETAIL_SAW_1	= 0x1028,
	ITEMID_DOVETAIL_SAW_2	= 0x1029,
	ITEMID_HAMMER_1		= 0x102a,
	ITEMID_HAMMER_2		= 0x102b,
	ITEMID_SAW_1		= 0x1034,
	ITEMID_SAW_2		= 0x1035,

	ITEMID_FOOD_BREAD   = 0x103b,
	ITEMID_FOOD_DOUGH_RAW = 0x103d,
	ITEMID_FOOD_COOKIE_RAW = 0x103f,
	ITEMID_FLOUR		= 0x1039,
	ITEMID_FOOD_PIZZA	= 0x1040,
	ITEMID_FOOD_PIE		= 0x1041,
	ITEMID_FOOD_PIE_RAW	= 0x1042,

	ITEMID_CLOCK1		= 0x104B,
	ITEMID_CLOCK2		= 0x104C,

	ITEMID_SEXTANT_1	= 0x1057,
	ITEMID_SEXTANT_2	= 0x1058,
	ITEMID_LOOM1		= 0x105f,
	ITEMID_LOOM2		= 0x1063,

	ITEMID_LEATHER_1	= 0x1067,
	ITEMID_LEATHER_2	= 0x1068,

	ITEMID_DUMMY1		= 0x1070,	// normal training dummy.
	ITEMID_FX_DUMMY1	= 0x1071,
	ITEMID_DUMMY2		= 0x1074,
	ITEMID_FX_DUMMY2	= 0x1075,

	ITEMID_HIDES		= 0x1078,
	ITEMID_HIDES_2		= 0x1079,
	ITEMID_FOOD_PIZZA_RAW = 0x1083,

	ITEMID_WEB2_1		= 0x10b8,
	ITEMID_WEB2_x		= 0x10d7,

	ITEMID_TRAP_FACE1	= 0x10f5,
	ITEMID_TRAP_FX_FACE1 = 0x10f6,
	ITEMID_TRAP_FACE2	= 0x10fc,
	ITEMID_TRAP_FX_FACE2 = 0x10fd,

	ITEMID_FX_SPARKLES	= 0x1153,	// magic sparkles.

	ITEMID_GRAVE_1		= 0x1165,
	ITEMID_GRAVE_32		= 0x1184,

	ITEMID_TRAP_CRUMBLEFLOOR = 0x11c0,

	ITEMID_BED3_1		= 0x11ce,
	ITEMID_BED3_X		= 0x11d5,

	ITEMID_FURS			= 0x11fa,

	ITEMID_BLOOD1		= 0x122a,
	ITEMID_BLOOD2		= 0x122b,
	ITEMID_BLOOD3		= 0x122c,
	ITEMID_BLOOD4		= 0x122d,
	ITEMID_BLOOD5		= 0x122e,
	ITEMID_BLOOD6		= 0x122f,

	ITEMID_ROCK_B_LO	= 0x134f,	// boulder.
	ITEMID_ROCK_B_HI	= 0x1362,
	ITEMID_ROCK_2_LO	= 0x1363,
	ITEMID_ROCK_2_HI	= 0x136d,

	ITEMID_BOW1			= 0x13b1,
	ITEMID_BOW2,

	ITEMID_SMITH_HAMMER = 0x13E4,

	ITEMID_HERD_CROOK3		= 0x13f4,
	ITEMID_HERD_CROOK4		= 0x13f5,

	ITEMID_BEE_WAX		= 0x1423,
	ITEMID_GRAIN		= 0x1449,

	ITEMID_BONE_ARMS    = 0x144e,
	ITEMID_BONE_ARMOR   = 0x144f,
	ITEMID_BONE_GLOVES  = 0x1450,
	ITEMID_BONE_HELM	= 0x1451,
	ITEMID_BONE_LEGS    = 0x1452,

	ITEMID_TELESCOPE1	= 0x1459,	// Big telescope
	ITEMID_TELESCOPEX	= 0x149a,

	ITEMID_MAP			= 0x14EB,
	ITEMID_MAP_2		= 0x14ec,

	ITEMID_DEED1		= 0x14ef,
	ITEMID_DEED2		= 0x14f0,
	ITEMID_SHIP_PLANS1	= 0x14f1,
	ITEMID_SHIP_PLANS2	= 0x14f2,

	ITEMID_SPYGLASS_1	= 0x14f5,
	ITEMID_SPYGLASS_2	= 0x14f6,

	ITEMID_LOCKPICK1	= 0x14fb,
	ITEMID_LOCKPICK4	= 0x14fe,

	ITEMID_SHIRT1		= 0x1517,
	ITEMID_PANTS1		= 0x152E,
	ITEMID_PANTS_FANCY	= 0x1539,

	ITEMID_HELM_BEAR	= 0x1545,
	ITEMID_HELM_DEER	= 0x1547,
	ITEMID_MASK_TREE	= 0x1549,
	ITEMID_MASK_VOODOO	= 0x154b,

	ITEMID_FOOD_LEG1_RAW= 0x1607,
	ITEMID_FOOD_LEG1	= 0x1608,
	ITEMID_FOOD_LEG2_RAW= 0x1609,
	ITEMID_FOOD_LEG2	= 0x160a,

	ITEMID_FOOD_COOKIES = 0x160b,
	ITEMID_BLOOD_SPLAT	= 0x1645,

	ITEMID_LIGHT_SRC	= 0x1647,

	ITEMID_WHIP1		= 0x166e,
	ITEMID_WHIP2		= 0x166f,

	ITEMID_SANDALS		 = 0x170d,
	ITEMID_SHOES		= 0x170F,

	ITEMID_HAT_WIZ		= 0x1718,
	ITEMID_HAT_JESTER	= 0x171c,

	ITEMID_FRUIT_BANANA1	= 0x171f,
	ITEMID_FRUIT_BANANA2	= 0x1720,
	ITEMID_FRUIT_COCONUT2= 0x1723,
	ITEMID_FRUIT_COCONUT3= 0x1724,
	ITEMID_FRUIT_COCONUT1= 0x1726,
	ITEMID_FRUIT_DATE1	= 0x1727,
	ITEMID_FRUIT_LEMON	= 0x1728,
	ITEMID_FRUIT_LIME		= 0x172a,
	ITEMID_FRUIT_PEACH2	= 0x172c,
	ITEMID_FRUIT_PEAR		= 0x172d,

	ITEMID_CLOTH1		= 0x175d,
	ITEMID_CLOTH8		= 0x1764,

	ITEMID_KEY_RING1	= 0x1769,
	ITEMID_KEY_RING3	= 0x176a,
	ITEMID_KEY_RING5	= 0x176b,

	ITEMID_ROCK_3_LO	= 0x1771,
	ITEMID_ROCK_3_HI	= 0x177c,

	ITEMID_ALCH_SYM_1	= 0x181d,
	ITEMID_ALCH_SYM_2	= 0x181e,
	ITEMID_ALCH_SYM_3	= 0x181f,
	ITEMID_ALCH_SYM_4	= 0x1820,
	ITEMID_ALCH_SYM_5	= 0x1821,
	ITEMID_ALCH_SYM_6	= 0x1822,
	ITEMID_ALCH_SYM_7	= 0x1823,
	ITEMID_ALCH_SYM_8	= 0x1824,
	ITEMID_ALCH_SYM_9	= 0x1825,
	ITEMID_ALCH_SYM_10	= 0x1826,
	ITEMID_ALCH_SYM_11	= 0x1827,
	ITEMID_ALCH_SYM_12	= 0x1828,

	ITEMID_FRUIT_MANDRAKE_ROOT1	= 0x18dd,
	ITEMID_FRUIT_MANDRAKE_ROOT2	= 0x18de,

	ITEMID_PLANT_MANDRAKE1	= 0x18df,
	ITEMID_PLANT_MANDRAKE2	= 0x18e0,
	ITEMID_PLANT_GARLIC1	= 0x18e1,
	ITEMID_PLANT_GARLIC2	= 0x18e2,
	ITEMID_FRUIT_GARLIC1	= 0x18e3,
	ITEMID_FRUIT_GARLIC2	= 0x18e4,
	ITEMID_PLANT_NIGHTSHADE1= 0x18e5,
	ITEMID_PLANT_NIGHTSHADE2= 0x18e6,
	ITEMID_FRUIT_NIGHTSHADE1		= 0x18e7,
	ITEMID_FRUIT_NIGHTSHADE2		= 0x18e8,
	ITEMID_PLANT_GENSENG1	= 0x18e9,
	ITEMID_PLANT_GENSENG2	= 0x18ea,
	ITEMID_FRUIT_GENSENG1= 0x18eb,
	ITEMID_FRUIT_GENSENG2= 0x18ec,

	ITEMID_Keg2			= 0x1940,

	ITEMID_MONGBATTARGET_S = 0x1950,

	ITEMID_BELLOWS_1	= 0x197a,
	ITEMID_BELLOWS_2	= 0x197b,
	ITEMID_BELLOWS_3	= 0x197c,
	ITEMID_BELLOWS_4	= 0x197d,
	ITEMID_FORGE_2		= 0x197e,
	ITEMID_FORGE_3		= 0x197f,
	ITEMID_FORGE_4		= 0x1980,
	ITEMID_FORGE_5		= 0x1981,
	ITEMID_FORGE_6		= 0x1982,
	ITEMID_FORGE_7		= 0x1983,
	ITEMID_FORGE_8		= 0x1984,
	ITEMID_FORGE_9		= 0x1985,
	ITEMID_BELLOWS_5	= 0x1986,
	ITEMID_BELLOWS_6	= 0x1987,
	ITEMID_BELLOWS_7	= 0x1988,
	ITEMID_BELLOWS_8	= 0x1989,
	ITEMID_FORGE_10		= 0x198a,
	ITEMID_FORGE_11		= 0x198b,
	ITEMID_FORGE_12		= 0x198c,
	ITEMID_FORGE_13		= 0x198d,
	ITEMID_FORGE_14		= 0x198e,
	ITEMID_FORGE_15		= 0x198f,
	ITEMID_FORGE_16		= 0x1990,
	ITEMID_FORGE_17		= 0x1991,
	ITEMID_BELLOWS_9	= 0x1992,
	ITEMID_BELLOWS_10	= 0x1993,
	ITEMID_BELLOWS_11	= 0x1994,
	ITEMID_BELLOWS_12	= 0x1995,
	ITEMID_FORGE_18		= 0x1996,
	ITEMID_FORGE_19		= 0x1997,
	ITEMID_FORGE_20		= 0x1998,
	ITEMID_FORGE_21		= 0x1999,
	ITEMID_FORGE_22		= 0x199a,
	ITEMID_FORGE_23		= 0x199b,
	ITEMID_FORGE_24		= 0x199c,
	ITEMID_FORGE_25		= 0x199d,
	ITEMID_BELLOWS_13	= 0x199e,
	ITEMID_BELLOWS_14	= 0x199f,
	ITEMID_BELLOWS_15	= 0x19a0,
	ITEMID_BELLOWS_16	= 0x19a1,
	ITEMID_FORGE_26		= 0x19a2,
	ITEMID_FORGE_27		= 0x19a3,
	ITEMID_FORGE_28		= 0x19a4,
	ITEMID_FORGE_29		= 0x19a5,
	ITEMID_FORGE_30		= 0x19a6,
	ITEMID_FORGE_31		= 0x19a7,
	ITEMID_FORGE_32		= 0x19a8,
	ITEMID_FORGE_33		= 0x19a9,

	ITEMID_FIRE			= 0x19ab,

	ITEMID_ORE_1			= 0x19b7, // can't mine this, it's just leftover from smelting
	ITEMID_ORE_3			= 0x19b8,
	ITEMID_ORE_4			= 0x19b9,
	ITEMID_ORE_2			= 0x19ba,

	ITEMID_PLANT_HAY1 = 0x1a92,
	ITEMID_PLANT_HAY2,
	ITEMID_PLANT_HAY3,
	ITEMID_PLANT_HAY4,
	ITEMID_PLANT_HAY5 = 0x1a96,

	ITEMID_PLANT_FLAX1	= 0x1a99,
	ITEMID_PLANT_FLAX2	= 0x1a9a,
	ITEMID_PLANT_FLAX3	= 0x1a9b,

	ITEMID_FRUIT_FLAX1	= 0x1a9c,
	ITEMID_FRUIT_FLAX2	= 0x1a9d,
	ITEMID_FRUIT_HOPS		= 0x1aa2,

	ITEMID_PLANT_HOPS1	= 0x1a9e,
	ITEMID_PLANT_HOPS2	= 0x1a9f,
	ITEMID_PLANT_HOPS3	= 0x1aa0,
	ITEMID_PLANT_HOPS4	= 0x1aa1,

	ITEMID_MOONGATE_FX_RED  = 0x1ae5,
	ITEMID_MOONGATE_FX_BLUE = 0x1af3,

	ITEMID_LEAVES1		= 0x1b1f,
	ITEMID_LEAVES2		= 0x1b20,
	ITEMID_LEAVES3		= 0x1b21,
	ITEMID_LEAVES4		= 0x1b22,

	ITEMID_HOLE			= 0x1b71,

	ITEMID_FEATHERS1	= 0x1bd1,
	ITEMID_FEATHERS3	= 0x1bd2,
	ITEMID_FEATHERS6	= 0x1bd3,
	ITEMID_SHAFTS1		= 0x1bd4,
	ITEMID_SHAFTS3		= 0x1bd5,
	ITEMID_SHAFTSX		= 0x1bd6,
	ITEMID_BOARD1		= 0x1bd7,	// boards

	ITEMID_LOG_1		= 0x1bdd,
	ITEMID_LOG_2		= 0x1bde,
	ITEMID_LOG_3		= 0x1bdf,
	ITEMID_LOG_4		= 0x1be0,
	ITEMID_LOG_5		= 0x1be1,
	ITEMID_LOG_6		= 0x1be2,

	ITEMID_INGOT_COPPER = 0x1be3,
	ITEMID_INGOT_GOLD	= 0x1be9,
	ITEMID_INGOT_IRON	= 0x1bef,
	ITEMID_INGOT_SILVER	= 0x1bf5,	//
	ITEMID_INGOTX		= 0x1BFA,
	ITEMID_XBolt		= 0x1bfb,
	ITEMID_XBoltX		= 0x1BFE,

	ITEMID_PICKPOCKET_NS2 = 0x1e2c,
	ITEMID_PICKPOCKET_EW2 = 0x1e2d,

	ITEMID_Bulletin1	= 0x1e5e,	// secure trades are here also. bboard
	ITEMID_Bulletin2	= 0x1e5f,
	ITEMID_WorldGem		= 0x1ea7,	// Typically a spawn item

	ITEMID_PICKPOCKET_NS = 0x1ec0,
	ITEMID_PICKPOCKET_NS_FX,
	ITEMID_PICKPOCKET_EW = 0x1ec3,
	ITEMID_PICKPOCKET_EW_FX,

	ITEMID_GEM_LIGHT1	= 0x1ecd,
	ITEMID_GEM_LIGHT6	= 0x1ed2,

	ITEMID_DOOR_MAGIC_SI_NS	= 0x1ed9,
	ITEMID_DOOR_MAGIC_GR_NS	= 0x1ee2,
	ITEMID_DOOR_MAGIC_SI_EW	= 0x1EEc,	// not 1eeb
	ITEMID_DOOR_MAGIC_GR_EW	= 0x1ef4,

	ITEMID_ROBE			= 0x1F03,
	ITEMID_RECALLRUNE	= 0x1f14,

	ITEMID_BEDROLL_O_W	= 0x1f24,	// open
	ITEMID_BEDROLL_O_E,
	ITEMID_BEDROLL_O_N,
	ITEMID_BEDROLL_O_S	= 0x1f27,

	ITEMID_SCROLL_1		= 0x1f2d,	// Reactive armor.
	ITEMID_SCROLL_2,
	ITEMID_SCROLL_3,
	ITEMID_SCROLL_4,
	ITEMID_SCROLL_5,
	ITEMID_SCROLL_6,
	ITEMID_SCROLL_7,
	ITEMID_SCROLL_8,
	ITEMID_SCROLL_64	= 0x1f6c,	// summon water

	ITEMID_SCROLL_A		= 0x1f6d,
	ITEMID_SCROLL_B		= 0x1f6e,
	ITEMID_SCROLL_C		= 0x1f6f,
	ITEMID_SCROLL_D		= 0x1f70,
	ITEMID_SCROLL_E		= 0x1f71,
	ITEMID_SCROLL_F		= 0x1f72,

	ITEMID_BOOZE_LIQU_G1 = 0x1f85,
	ITEMID_BOOZE_LIQU_G2 = 0x1f86,
	ITEMID_BOOZE_LIQU_G3 = 0x1f87,
	ITEMID_BOOZE_LIQU_G4 = 0x1f88,
	ITEMID_BOOZE_WINE_G1 = 0x1f8d,
	ITEMID_BOOZE_WINE_G2 = 0x1f8e,
	ITEMID_BOOZE_WINE_G3 = 0x1f8f,
	ITEMID_BOOZE_WINE_G4 = 0x1f90,
	ITEMID_BOOZE_ALE_P1  = 0x1f95,
	ITEMID_BOOZE_ALE_P2  = 0x1f96,
	ITEMID_BOOZE_LIQU_P1 = 0x1f99,
	ITEMID_BOOZE_LIQU_P2 = 0x1f9a,
	ITEMID_BOOZE_WINE_P1 = 0x1f9b,
	ITEMID_BOOZE_WINE_P2 = 0x1f9c,

	ITEMID_DOOR_BAR_METAL  = 0x1fed,

	ITEMID_CORPSE		= 0x2006,	// This is all corpses.

	ITEMID_MEMORY		= 0x2007,	// NonGen Marker.

	ITEMID_HAIR_SHORT		= 0x203B,
	ITEMID_HAIR_LONG		= 0x203C,
	ITEMID_HAIR_PONYTAIL	= 0x203D,
	ITEMID_HAIR_MOHAWK		= 0x2044,
	ITEMID_HAIR_PAGEBOY		= 0x2045,
	ITEMID_HAIR_BUNS		= 0x2046,
	ITEMID_HAIR_AFRO		= 0x2047,
	ITEMID_HAIR_RECEDING	= 0x2048,
	ITEMID_HAIR_2_PIGTAILS	= 0x2049,
	ITEMID_HAIR_TOPKNOT		= 0x204A,	// KRISNA

	ITEMID_BEARD_LONG		= 0x203E,
	ITEMID_BEARD_SHORT		= 0x203F,
	ITEMID_BEARD_GOATEE		= 0x2040,
	ITEMID_BEARD_MOUSTACHE	= 0x2041,
	ITEMID_BEARD_SH_M		= 0x204B,
	ITEMID_BEARD_LG_M		= 0x204C,
	ITEMID_BEARD_GO_M		= 0x204D,	// VANDYKE

	ITEMID_DEATHSHROUD		= 0x204E,
	ITEMID_GM_ROBE			= 0x204f,

	ITEMID_RHAND_POINT_NW	= 0x2053,	// point nw on the map.
	ITEMID_RHAND_POINT_W	= 0x205a,

	ITEMID_HAND_POINT_NW	= 0x206a,	// point nw on the map.
	ITEMID_HAND_POINT_W		= 0x2071,

	ITEMID_SPELL_1			= 0x2080,
	ITEMID_SPELL_6			= 0x2085,	// light or night sight.
	ITEMID_SPELL_64			= 0x20bf,

	ITEMID_SPELL_CIRCLE1	= 0x20c0,
	ITEMID_SPELL_CIRCLE8	= 0x20c7,

	// Item equiv of creatures.
	ITEMID_TRACK_BEGIN		= 0x20c8,
	ITEMID_TRACK_ETTIN		= 0x20c8,
	ITEMID_TRACK_MAN_NAKED	= 0x20cd,
	ITEMID_TRACK_ELEM_EARTH = 0x20d7,
	ITEMID_TRACK_OGRE		= 0x20df,
	ITEMID_TRACK_TROLL		= 0x20e9,
	ITEMID_TRACK_ELEM_AIR	= 0x20ed,
	ITEMID_TRACK_ELEM_FIRE  = 0x20f3,
	ITEMID_TRACK_SEASERP	= 0x20fe,
	ITEMID_TRACK_WISP		= 0x2100,
	ITEMID_TRACK_MAN		= 0x2106,
	ITEMID_TRACK_WOMAN		= 0x2107,
	ITEMID_TRACK_ELEM_WATER = 0x210b,
	ITEMID_TRACK_HORSE		= 0x2120,
	ITEMID_TRACK_RABBIT		= 0x2125,
	ITEMID_TRACK_PACK_HORSE	= 0x2126,
	ITEMID_TRACK_PACK_LLAMA	= 0x2127,
	ITEMID_TRACK_END		= 0x213e,
	ITEMID_DOOR_WOOD_BLACK	= 0x2420,

	ITEMID_DOOR_SLIDING_2	= 0x2a05,

	ITEMID_VENDOR_BOX		= 0x2af8, // Vendor container
	ITEMID_DOOR_ELVEN_BARK	= 0x31ac,
	ITEMID_DOOR_ELVEN_SIMPLE= 0x2d63,
	ITEMID_DOOR_ELVEN_ORNATE= 0x2d67,
	ITEMID_DOOR_ELVEN_PLAIN	= 0x2d6F,

	// ML hair
	ITEMID_HAIR_ML_ELF		= 0x2fbf,
	ITEMID_HAIR_ML_LFEAT	= 0x2fc0,
	ITEMID_HAIR_ML_SHORT	= 0x2fc1, 
	ITEMID_HAIR_ML_MULLET	= 0x2fc2,
	ITEMID_HAIR_ML_FLOWER	= 0x2fcc,
	ITEMID_HAIR_ML_LONG2	= 0x2fcd,
	ITEMID_HAIR_ML_LONG3	= 0x2fce,
	ITEMID_HAIR_ML_BRAID	= 0x2fcf,
	ITEMID_HAIR_ML_LONG4	= 0x2fd0,
	ITEMID_HAIR_ML_SPYKE	= 0x2fd1,
	ITEMID_DOOR_MOON		= 0x2fe4,

	ITEMID_DIRT_TILE		= 0x31f4,

	ITEMID_ROCK_4_LO		= 0x3421,
	ITEMID_ROCK_4_HI		= 0x3435,
	ITEMID_ROCK_5_LO		= 0x3486,
	ITEMID_ROCK_5_HI		= 0x348f,
	ITEMID_ROCK_6_LO		= 0x34ac,
	ITEMID_ROCK_6_HI		= 0x34b4,

	// effects.
	ITEMID_FX_SPLASH		= 0x352d,

	ITEMID_GAME1_CHECKER= 0x3584,	// white
	ITEMID_GAME1_BISHOP = 0x3585,
	ITEMID_GAME1_ROOK	= 0x3586,
	ITEMID_GAME1_QUEEN	= 0x3587,
	ITEMID_GAME1_KNIGHT	= 0x3588,
	ITEMID_GAME1_PAWN	= 0x3589,
	ITEMID_GAME1_KING	= 0x358a,

	ITEMID_GAME2_CHECKER= 0x358b,	// brown
	ITEMID_GAME2_BISHOP = 0x358c,
	ITEMID_GAME2_ROOK	= 0x358d,
	ITEMID_GAME2_QUEEN	= 0x358e,
	ITEMID_GAME2_KNIGHT	= 0x358f,
	ITEMID_GAME2_PAWN	= 0x3590,
	ITEMID_GAME2_KING	= 0x3591,

	ITEMID_GAME_HI		= 0x35a1,	// ?
	ITEMID_DOOR_CRYSTAL = 0x367b,
	ITEMID_DOOR_SHADOW	= 0x368b,

	ITEMID_FX_EXPLODE_3	= 0x36b0,
	ITEMID_FX_EXPLODE_1	= 0x36ca,
	ITEMID_FX_FIRE_BALL	= 0x36d4,
	ITEMID_FX_MAGIC_ARROW	= 0x36e4,
	ITEMID_FX_FIRE_BOLT		= 0x36f4, // fire snake
	ITEMID_FX_FLAMESTRIKE	= 0x3709,
	ITEMID_FX_TELE_VANISH	= 0x3728,	// teleport vanish
	ITEMID_FX_SPELL_FAIL	= 0x3735,
	ITEMID_FX_BLESS_EFFECT	= 0x373a,
	ITEMID_FX_CURSE_EFFECT	= 0x374a,
	ITEMID_FX_SPARKLE		= 0x375a,
	ITEMID_FX_HEAL_EFFECT	= 0x376a,
	ITEMID_FX_SPARKLE_2		= 0x3779,
	ITEMID_FX_ENERGY_BOLT	= 0x379f,
	ITEMID_FX_GLOW			= 0x37b9,
	ITEMID_FX_POISON_F_EW	= 0x3915,
	ITEMID_FX_POISON_F_NS	= 0x3920,
	ITEMID_FX_ENERGY_F_EW	= 0x3947,
	ITEMID_FX_ENERGY_F_NS	= 0x3956,
	ITEMID_FX_PARA_F_EW	= 0x3967,
	ITEMID_FX_PARA_F_NS	= 0x3979,
	ITEMID_FX_FIRE_F_EW	= 0x398c,	// E/W
	ITEMID_FX_FIRE_F_NS	= 0x3996,	// N/S

	ITEMID_SHIP_TILLER_1	= 0x3e4a,
	ITEMID_SHIP_TILLER_2	= 0x3e4b,
	ITEMID_SHIP_TILLER_3	= 0x3e4c,
	ITEMID_SHIP_TILLER_4	= 0x3e4d,
	ITEMID_SHIP_TILLER_5	= 0x3e4e,
	ITEMID_SHIP_TILLER_6,
	ITEMID_SHIP_TILLER_7	= 0x3e50,
	ITEMID_SHIP_TILLER_8,
	ITEMID_SHIP_TILLER_12	= 0x3e55,

	ITEMID_SHIP_PLANK_S2_O	= 0x3e84,
	ITEMID_SHIP_PLANK_S2_C	= 0x3e85,
	ITEMID_SHIP_PLANK_S_O	= 0x3e86,
	ITEMID_SHIP_PLANK_S_C	= 0x3e87,
	ITEMID_SHIP_PLANK_N_O	= 0x3e89,
	ITEMID_SHIP_PLANK_N_C	= 0x3e8a,

	ITEMID_M_HORSE1		= 0x3E9F,	// horse item when ridden
	ITEMID_M_HORSE2		= 0x3EA0,
	ITEMID_M_HORSE3		= 0x3EA1,
	ITEMID_M_HORSE4		= 0x3EA2,
	ITEMID_M_OSTARD_DES	= 0x3ea3,	// t2A
	ITEMID_M_OSTARD_Frenz = 0x3ea4,	// t2A
	ITEMID_M_OSTARD_For	= 0x3ea5,	// t2A
	ITEMID_M_LLAMA		= 0x3ea6,	// t2A

	ITEMID_SHIP_PLANK_E_C	= 0x3ea9,
	ITEMID_SHIP_PLANK_W_C	= 0x3eb1,
	ITEMID_SHIP_PLANK_E2_C	= 0x3eb2,
	ITEMID_SHIP_PLANK_E_O	= 0x3ed3,
	ITEMID_SHIP_PLANK_E2_O	= 0x3ed4,
	ITEMID_SHIP_PLANK_W_O	= 0x3ed5,

	ITEMID_SHIP_HATCH_E = 0x3e65,	// for an east bound ship.
	ITEMID_SHIP_HATCH_W	= 0x3e93,
	ITEMID_SHIP_HATCH_N	= 0x3eae,
	ITEMID_SHIP_HATCH_S	= 0x3eb9,

	ITEMID_CORPSE_1	= 0x3d64,	// 'dead orc captain'
	ITEMID_CORPSE_2,	// 'corpse of orc'
	ITEMID_CORPSE_3,	// 'corpse of skeleton
	ITEMID_CORPSE_4,	// 'corpse'
	ITEMID_CORPSE_5,	// 'corpse'
	ITEMID_CORPSE_6,	// 'deer corpse'
	ITEMID_CORPSE_7,	// 'wolf corpse'
	ITEMID_CORPSE_8,	// 'corpse of rabbit'

	ITEMID_HEALING_STONE= 0x4078,
	ITEMID_DOOR_WALLSET3= 0x409b,
	ITEMID_DOOR_GARGOYLE= 0x410c,
	ITEMID_DOOR_WALLSET2= 0x41c2,
	ITEMID_DOOR_WALLSET1= 0x41cf,
	ITEMID_DOOR_QUEEN	= 0x4d1a,
	// Large composite objects here.
	ITEMID_MULTI_LEGACY	= 0x4000, // ITEMID_MULTI for old clients (<7.0.0.0)
	ITEMID_MULTI_SA		= 0x8000, // ITEMID_MULTI for sa clients (<7.0.8.44)
	ITEMID_MULTI		= 0x10000,
	ITEMID_SHIP1_N		= ITEMID_MULTI + 0x0000,
	ITEMID_SHIP1_E		= ITEMID_MULTI + 0x0001,
	ITEMID_SHIP1_S		= ITEMID_MULTI + 0x0002,
	ITEMID_SHIP1_W		= ITEMID_MULTI + 0x0003,
	ITEMID_SHIP2_N		= ITEMID_MULTI + 0x0004,
	ITEMID_SHIP2_E,
	ITEMID_SHIP2_S,
	ITEMID_SHIP2_W,
	ITEMID_SHIP3_N		= ITEMID_MULTI + 0x0008,
	ITEMID_SHIP4_N		= ITEMID_MULTI + 0x000c,
	ITEMID_SHIP5_N		= ITEMID_MULTI + 0x0010,
	ITEMID_SHIP6_N		= ITEMID_MULTI + 0x0014,
	ITEMID_SHIP6_E,
	ITEMID_SHIP6_S,
	ITEMID_SHIP6_W   	= ITEMID_MULTI + 0x0017,

	ITEMID_HOUSE		= ITEMID_MULTI + 0x0064,
	ITEMID_HOUSE_FORGE	= ITEMID_MULTI + 0x0065,
	ITEMID_HOUSE_STONE	= ITEMID_MULTI + 0x0066,
	ITEMID_TENT_BLUE	= ITEMID_MULTI + 0x0070,
	ITEMID_TENT_GREEN	= ITEMID_MULTI + 0x0072,
	ITEMID_3ROOM		= ITEMID_MULTI + 0x0074,	// 3 room house
	ITEMID_2STORY_STUKO = ITEMID_MULTI + 0x0076,
	ITEMID_2STORY_SAND	= ITEMID_MULTI + 0x0078,
	ITEMID_TOWER		= ITEMID_MULTI + 0x007a,
	ITEMID_KEEP		 	= ITEMID_MULTI + 0x007c,	// keep
	ITEMID_CASTLE		= ITEMID_MULTI + 0x007e,	// castle 7f also.
	ITEMID_LARGESHOP	= ITEMID_MULTI + 0x008c,	// in verdata.mul file.
	ITEMID_MULTI_EXT_1	= ITEMID_MULTI + 0x0bb8,
	ITEMID_MULTI_EXT_2	= ITEMID_MULTI + 0x1388,	// minax tower.
	ITEMID_HOUSEFOUNDATION_7x7	 	= ITEMID_MULTI + 0x13ec,
	ITEMID_HOUSEFOUNDATION_7x8,
	ITEMID_HOUSEFOUNDATION_7x9,
	ITEMID_HOUSEFOUNDATION_7x10,
	ITEMID_HOUSEFOUNDATION_7x11,
	ITEMID_HOUSEFOUNDATION_7x12,
	ITEMID_HOUSEFOUNDATION_8x7	 	= ITEMID_MULTI + 0x13f8,
	ITEMID_HOUSEFOUNDATION_8x8,
	ITEMID_HOUSEFOUNDATION_8x9,
	ITEMID_HOUSEFOUNDATION_8x10,
	ITEMID_HOUSEFOUNDATION_8x11,
	ITEMID_HOUSEFOUNDATION_8x12,
	ITEMID_HOUSEFOUNDATION_8x13,
	ITEMID_HOUSEFOUNDATION_9x7 		= ITEMID_MULTI + 0x1404,
	ITEMID_HOUSEFOUNDATION_9x8,
	ITEMID_HOUSEFOUNDATION_9x9,
	ITEMID_HOUSEFOUNDATION_9x10,
	ITEMID_HOUSEFOUNDATION_9x11,
	ITEMID_HOUSEFOUNDATION_9x12,
	ITEMID_HOUSEFOUNDATION_9x13,
	ITEMID_HOUSEFOUNDATION_10x7 	= ITEMID_MULTI + 0x1410,
	ITEMID_HOUSEFOUNDATION_10x8,
	ITEMID_HOUSEFOUNDATION_10x9,
	ITEMID_HOUSEFOUNDATION_10x10,
	ITEMID_HOUSEFOUNDATION_10x11,
	ITEMID_HOUSEFOUNDATION_10x12,
	ITEMID_HOUSEFOUNDATION_10x13,
	ITEMID_HOUSEFOUNDATION_11x7 	= ITEMID_MULTI + 0x141c,
	ITEMID_HOUSEFOUNDATION_11x8,
	ITEMID_HOUSEFOUNDATION_11x9,
	ITEMID_HOUSEFOUNDATION_11x10,
	ITEMID_HOUSEFOUNDATION_11x11,
	ITEMID_HOUSEFOUNDATION_11x12,
	ITEMID_HOUSEFOUNDATION_11x13,
	ITEMID_HOUSEFOUNDATION_12x7 	= ITEMID_MULTI + 0x1428,
	ITEMID_HOUSEFOUNDATION_12x8,
	ITEMID_HOUSEFOUNDATION_12x9,
	ITEMID_HOUSEFOUNDATION_12x10,
	ITEMID_HOUSEFOUNDATION_12x11,
	ITEMID_HOUSEFOUNDATION_12x12,
	ITEMID_HOUSEFOUNDATION_12x13,
	ITEMID_HOUSEFOUNDATION_13x8 	= ITEMID_MULTI + 0x1435,
	ITEMID_HOUSEFOUNDATION_13x9,
	ITEMID_HOUSEFOUNDATION_13x10,
	ITEMID_HOUSEFOUNDATION_13x11,
	ITEMID_HOUSEFOUNDATION_13x12,
	ITEMID_HOUSEFOUNDATION_13x13,
	ITEMID_MULTISTAIRS_WOOD_SN	= ITEMID_MULTI + 0x1db0,
	ITEMID_MULTISTAIRS_WOOD_WE,
	ITEMID_MULTISTAIRS_WOOD_NS,
	ITEMID_MULTISTAIRS_WOOD_EW,
	ITEMID_MULTISTAIRS_STONE_SN	= ITEMID_MULTI + 0x1db4,
	ITEMID_MULTISTAIRS_STONE_WE,
	ITEMID_MULTISTAIRS_STONE_NS,
	ITEMID_MULTISTAIRS_STONE_EW,
	ITEMID_MULTISTAIRS_STONE2_SN	= ITEMID_MULTI + 0x1db8,
	ITEMID_MULTISTAIRS_STONE2_WE,
	ITEMID_MULTISTAIRS_STONE2_NS,
	ITEMID_MULTISTAIRS_STONE2_EW,
	ITEMID_MULTISTAIRS_WOOD2_SN	= ITEMID_MULTI + 0x1dbc,
	ITEMID_MULTISTAIRS_WOOD2_WE,
	ITEMID_MULTISTAIRS_WOOD2_NS,
	ITEMID_MULTISTAIRS_WOOD2_EW,
	ITEMID_MULTISTAIRS_STONE3_SN	= ITEMID_MULTI + 0x1dc0,
	ITEMID_MULTISTAIRS_STONE3_WE,
	ITEMID_MULTISTAIRS_STONE3_NS,
	ITEMID_MULTISTAIRS_STONE3_EW,
	ITEMID_MULTISTAIRS_MARBLE_SN	= ITEMID_MULTI + 0x1dc4,
	ITEMID_MULTISTAIRS_MARBLE_WE,
	ITEMID_MULTISTAIRS_MARBLE_NS,
	ITEMID_MULTISTAIRS_MARBLE_EW,
	ITEMID_MULTISTAIRS_STONE4_SN	= ITEMID_MULTI + 0x1dc8,
	ITEMID_MULTISTAIRS_STONE4_WE,
	ITEMID_MULTISTAIRS_STONE4_NS,
	ITEMID_MULTISTAIRS_STONE4_EW,
	ITEMID_MULTISTAIRS_SANDSTONE_SN	= ITEMID_MULTI + 0x1dcc,
	ITEMID_MULTISTAIRS_SANDSTONE_WE,
	ITEMID_MULTISTAIRS_SANDSTONE_NS,
	ITEMID_MULTISTAIRS_SANDSTONE_EW,
	ITEMID_MULTISTAIRS_STONE5_SN	= ITEMID_MULTI + 0x1dd0,
	ITEMID_MULTISTAIRS_STONE5_WE,
	ITEMID_MULTISTAIRS_STONE5_NS,
	ITEMID_MULTISTAIRS_STONE5_EW,
	ITEMID_MULTISTAIRS_CARPET_SN	= ITEMID_MULTI + 0x1dd4,
	ITEMID_MULTISTAIRS_CARPET_WE,
	ITEMID_MULTISTAIRS_CARPET_NS,
	ITEMID_MULTISTAIRS_CARPET_EW,
	ITEMID_MULTISTAIRS_CRYSTAL_SN	= ITEMID_MULTI + 0x1dd8,
	ITEMID_MULTISTAIRS_CRYSTAL_WE,
	ITEMID_MULTISTAIRS_CRYSTAL_NS,
	ITEMID_MULTISTAIRS_CRYSTAL_EW,
	ITEMID_MULTISTAIRS_SHADOW_SN	= ITEMID_MULTI + 0x1ddc,
	ITEMID_MULTISTAIRS_SHADOW_WE,
	ITEMID_MULTISTAIRS_SHADOW_NS,
	ITEMID_MULTISTAIRS_SHADOW_EW,

	ITEMID_MULTI_MAX	= (ITEMID_MULTI + MULTI_QTY - 1),	// ??? this is higher than next !

	// These overlap for now damnit !!! fix this.
	// Special scriptable objects defined after this.
	ITEMID_QTY			= 0x10000,

	// Put named items here.
	ITEMID_SCRIPT2		= ITEMID_QTY,	// Safe area for server admins.
	ITEMID_TEMPLATE		= ITEMID_SCRIPT2 + 0x9FFF	// container item templates are beyond here.
};

// Door ID Attribute flags.
#define DOOR_OPENED			0x00000001	// set is open
#define DOOR_RIGHTLEFT		0x00000002
#define DOOR_INOUT			0x00000004
#define DOOR_NORTHSOUTH		0x00000008

enum CREID_TYPE		// enum the creature art work. (dont allow any others !) also know as "model number"
{
	CREID_INVALID		= 0,

	CREID_OGRE			= 0x0001,
	CREID_ETTIN			= 0x0002,
	CREID_ZOMBIE		= 0x0003,
	CREID_GARGOYLE		= 0x0004,
	CREID_EAGLE			= 0x0005,
	CREID_BIRD			= 0x0006,
	CREID_ORC_LORD		= 0x0007,
	CREID_CORPSER		= 0x0008,
	CREID_DAEMON		= 0x0009,
	CREID_DAEMON_SWORD	= 0x000A,

	CREID_DRAGON_GREY	= 0x000c,
	CREID_AIR_ELEM		= 0x000d,
	CREID_EARTH_ELEM	= 0x000e,
	CREID_FIRE_ELEM		= 0x000f,
	CREID_WATER_ELEM	= 0x0010,
	CREID_ORC			= 0x0011,
	CREID_ETTIN_AXE		= 0x0012,

	CREID_GIANT_SNAKE	= 0x0015,
	CREID_GAZER			= 0x0016,

	CREID_LICH			= 0x0018,

	CREID_SPECTRE		= 0x001a,

	CREID_GIANT_SPIDER	= 0x001c,
	CREID_GORILLA		= 0x001d,
	CREID_HARPY			= 0x001e,
	CREID_HEADLESS		= 0x001f,

	CREID_LIZMAN		= 0x0021,
	CREID_LIZMAN_SPEAR	= 0x0023,
	CREID_LIZMAN_MACE	= 0x0024,

	CREID_MONGBAT		= 0x0027,

	CREID_ORC_CLUB		= 0x0029,
	CREID_RATMAN		= 0x002a,

	CREID_RATMAN_CLUB	= 0x002c,
	CREID_RATMAN_SWORD	= 0x002d,

	CREID_REAPER		= 0x002f,	// tree
	CREID_SCORP			= 0x0030,	// giant scorp.

	CREID_SKELETON      = 0x0032,
	CREID_SLIME			= 0x0033,
	CREID_Snake			= 0x0034,
	CREID_TROLL_SWORD	= 0x0035,
	CREID_TROLL			= 0x0036,
	CREID_TROLL_MACE	= 0x0037,
	CREID_SKEL_AXE		= 0x0038,
	CREID_SKEL_SW_SH	= 0x0039,	// sword and sheild
	CREID_WISP			= 0x003a,
	CREID_DRAGON_RED	= 0x003b,
	CREID_DRAKE_GREY	= 0x003c,
	CREID_DRAKE_RED		= 0x003d,

	CREID_Tera_Warrior	= 0x0046,	// T2A 0x46 = Terathen Warrior
	CREID_Tera_Drone	= 0x0047,	// T2A 0x47 = Terathen Drone
	CREID_Tera_Matriarch= 0x0048,	// T2A 0x48 = Terathen Matriarch

	CREID_Titan			= 0x004b,	// T2A 0x4b = Titan
	CREID_Cyclops		= 0x004c,	// T2A 0x4c = Cyclops
	CREID_Giant_Toad	= 0x0050,	// T2A 0x50 = Giant Toad
	CREID_Bull_Frog		= 0x0051,	// T2A 0x51 = Bull Frog

	CREID_Ophid_Mage	= 0x0055,	// T2A 0x55 = Ophidian Mage
	CREID_Ophid_Warrior	= 0x0056,	// T2A 0x56 = Ophidian Warrior
	CREID_Ophid_Queen	= 0x0057,	// T2A 0x57 = Ophidian Queen
	CREID_SEA_Creature	= 0x005f,	// T2A 0x5f = (Unknown Sea Creature)

	CREID_SERPENTINE_DRAGON = 0x0067,	// LBR
	CREID_SKELETAL_DRAGON = 0x0068,		// LBR

	CREID_SEA_SERP		= 0x0096,
	CREID_Dolphin		= 0x0097,

	CREID_SHADE			= 0x0099,		// LBR
	CREID_MUMMY			= 0x009a,		// LBR

	// Animals (Low detail critters)

	CREID_HORSE1		= 0x00C8,	// white = 200 decinal
	CREID_Cat			= 0x00c9,
	CREID_Alligator		= 0x00CA,
	CREID_Pig			= 0x00CB,
	CREID_HORSE4		= 0x00CC,	// brown
	CREID_Rabbit		= 0x00CD,
	CREID_LavaLizard	= 0x00ce,	// T2A = Lava Lizard
	CREID_Sheep			= 0x00CF,	// un-sheered.
	CREID_Chicken		= 0x00D0,
	CREID_Goat			= 0x00d1,
	CREID_Ostard_Desert = 0x00d2,	// T2A = Desert Ostard (ridable)
	CREID_BrownBear		= 0x00D3,
	CREID_GrizzlyBear	= 0x00D4,
	CREID_PolarBear		= 0x00D5,
	CREID_Panther		= 0x00d6,
	CREID_GiantRat		= 0x00D7,
	CREID_Cow_BW		= 0x00d8,
	CREID_Dog			= 0x00D9,
	CREID_Ostard_Frenz	= 0x00da,	// T2A = Frenzied Ostard (ridable)
	CREID_Ostard_Forest = 0x00db,	// T2A = Forest Ostard (ridable)
	CREID_Llama			= 0x00dc,
	CREID_Walrus		= 0x00dd,
	CREID_Sheep_Sheered	= 0x00df,
	CREID_Wolf			= 0x00e1,
	CREID_HORSE2		= 0x00E2,
	CREID_HORSE3		= 0x00E4,
	CREID_Cow2			= 0x00e7,
	CREID_Bull_Brown	= 0x00e8,	// light brown
	CREID_Bull2			= 0x00e9,	// dark brown
	CREID_Hart			= 0x00EA,	// Male deer.
	CREID_Deer			= 0x00ED,
	CREID_Rat			= 0x00ee,

	CREID_Boar			= 0x0122,	// large pig
	CREID_HORSE_PACK	= 0x0123,	// Pack horse with saddle bags
	CREID_LLAMA_PACK	= 0x0124,	// Pack llama with saddle bags

	// all below here are humanish or clothing.
	CREID_MAN			= 0x0190,	// 400 decimal
	CREID_WOMAN			= 0x0191,
	CREID_GHOSTMAN		= 0x0192,	// Ghost robe is not automatic !
	CREID_GHOSTWOMAN	= 0x0193,
	CREID_EQUIP,

	CREID_VORTEX		= 0x023d,	// T2A = vortex
	CREID_BLADES		= 0x023e,	// blade spirits (in human range? not sure why)

	CREID_ELFMAN			= 0x025D,	// 605 decimal
	CREID_ELFWOMAN			= 0x025E,
	CREID_ELFGHOSTMAN		= 0x025F,
	CREID_ELFGHOSTWOMAN		= 0x0260,
 
	CREID_GARGMAN			= 0x029A,	// 666 decimal
	CREID_GARGWOMAN			= 0x029B,
	CREID_GARGGHOSTMAN		= 0x02B6,	// 694
	CREID_GARGGHOSTWOMAN	= 0x02B7,

	//	new monsters lies between this range
	CREID_IRON_GOLEM		= 0x02f0,		// LBR
	//..
	CREID_SWAMP_DRAGON1		= 0x031a,		// LBR
	CREID_REPTILE_LORD		= 0x031d,		// LBR
	CREID_ANCIENT_WYRM		= 0x031e,		// LBR
	CREID_SWAMP_DRAGON2		= 0x031f,		// LBR
	//..
	CREID_EQUIP_GM_ROBE		= 0x03db,
	//..
	CREID_MULTICOLORED_HORDE_DAEMON = 0x03e7,		// LBR

	CREID_Revenant			= 0x2ee,
	CREID_Horrific_Beast	= 0x2ea,
	CREID_Stone_Form		= 0x2c1,
	CREID_Vampire_Bat		= 0x13d,
	CREID_Reaper_Form		= 0xe6,

	CREID_QTY				= 0x0800,	// Max number of base character types, based on art work.

	// re-use artwork to make other types on NPC's
	NPCID_SCRIPT			= 0x801,

	NPCID_SCRIPT2			= 0x4000,	// Safe area for server specific NPC defintions.
	NPCID_Qty				= 0x8000,		// Spawn types start here.

	SPAWNTYPE_START			= 0x8001
};

enum ANIM_TYPE	// not all creatures animate the same for some reason.
{
	ANIM_WALK_UNARM		= 0x00,	// Walk (unarmed)

	// human anim. (supported by all humans)
	ANIM_WALK_ARM		= 0x01,	// Walk (armed) (but not war mode)

	ANIM_RUN_UNARM		= 0x02,	// Run (unarmed)
	ANIM_RUN_ARMED		= 0x03,	// Run (armed)

	ANIM_STAND			= 0x04,	// armed or unarmed.

	ANIM_FIDGET1		= 0x05,	// Look around
	ANIM_FIDGET_YAWN	= 0x06,	// Fidget, Yawn

	ANIM_STAND_WAR_1H	= 0x07,	// Stand for 1 hand attack.
	ANIM_STAND_WAR_2H	= 0x08,	// Stand for 2 hand attack.

	ANIM_ATTACK_WEAPON		= 0x09,	// 1H generic melee swing, any weapon.
	ANIM_ATTACK_1H_SLASH	= 0x09,
	ANIM_ATTACK_1H_PIERCE	= 0x0a,
	ANIM_ATTACK_1H_BASH		= 0x0b,

	ANIM_ATTACK_2H_BASH		= 0x0c,
	ANIM_ATTACK_2H_SLASH	= 0x0d,
	ANIM_ATTACK_2H_PIERCE	= 0x0e,

	ANIM_WALK_WAR		= 0x0f,	// Walk (warmode)

	ANIM_CAST_DIR		= 0x10,	// Directional spellcast
	ANIM_CAST_AREA		= 0x11,	// Area-effect spellcast

	ANIM_ATTACK_BOW		= 0x12,	// Bow attack / Mounted bow attack
	ANIM_ATTACK_XBOW	= 0x13,	// Crossbow attack
	ANIM_GET_HIT		= 0x14,	// Take a hit

	ANIM_DIE_BACK		= 0x15,	// (Die onto back)
	ANIM_DIE_FORWARD	= 0x16,	// (Die onto face)

	ANIM_BLOCK			= 0x1e,	// Dodge, Shield Block
	ANIM_ATTACK_WRESTLE	= 0x1f,	// Punch - attack while walking ?

	ANIM_BOW			= 0x20, // =32
	ANIM_SALUTE			= 0x21,
	ANIM_EAT			= 0x22,

	// don't use these directly these are just for translation.
	// Human on horseback
	ANIM_HORSE_RIDE_SLOW	= 0x17,
	ANIM_HORSE_RIDE_FAST	= 0x18,
	ANIM_HORSE_STAND		= 0x19,
	ANIM_HORSE_ATTACK		= 0x1a,
	ANIM_HORSE_ATTACK_BOW	= 0x1b,
	ANIM_HORSE_ATTACK_XBOW	= 0x1c,
	ANIM_HORSE_SLAP			= 0x1d,

	ANIM_QTY_MAN = 35,	// 0x23

	ANIM_MAN_SIT = 35,

	// monster anim	- (not all anims are supported for each creature)
	ANIM_MON_WALK 		= 0x00,
	ANIM_MON_STAND		= 0x01,
	ANIM_MON_DIE1		= 0x02,	// back
	ANIM_MON_DIE2		= 0x03, // fore or side.
	ANIM_MON_ATTACK1	= 0x04,	// ALL creatures have at least this attack.
	ANIM_MON_ATTACK2	= 0x05,	// swimming monsteers don't have this.
	ANIM_MON_ATTACK3	= 0x06,
	ANIM_MON_AttackBow	= 0x07, // air/fire elem = flail arms.
	ANIM_MON_AttackXBow = 0x08,	// Misc Roll over,
	ANIM_MON_AttackThrow,
	ANIM_MON_GETHIT 	= 0x0a,
	ANIM_MON_PILLAGE	= 0x0b,	// 11 = Misc, Stomp, slap ground, lich conjure.
	ANIM_MON_Stomp		= 0x0c,	// Misc Cast, breath fire, elem creation.
	ANIM_MON_Cast2		= 0x0d,	// 13 = Trolls don't have this.
	ANIM_MON_Cast3,	
	ANIM_MON_BlockRight	= 0x0f,
	ANIM_MON_BlockLeft	= 0x10,
	ANIM_MON_FIDGET1	= 0x11,	// 17=Idle
	ANIM_MON_FIDGET2	= 0x12,	// 18
	ANIM_MON_FLY		= 0x13,
	ANIM_MON_LAND		= 0x14,	// TakeOff
	ANIM_MON_DIE_FLIGHT	= 0x15,	// GetHitInAir

	ANIM_QTY_MON = 22,

	// animals. (Most All animals have all anims)
	ANIM_ANI_WALK		= 0x00,
	ANIM_ANI_RUN		= 0x01,
	ANIM_ANI_STAND		= 0x02,
	ANIM_ANI_EAT		= 0x03,
	ANIM_ANI_ALERT,				// not all have this.
	ANIM_ANI_ATTACK1	= 0x05,
	ANIM_ANI_ATTACK2	= 0x06,
	ANIM_ANI_GETHIT 	= 0x07,
	ANIM_ANI_DIE1 		= 0x08,
	ANIM_ANI_FIDGET1	= 0x09,	// Idle
	ANIM_ANI_FIDGET2	= 0x0a,
	ANIM_ANI_SLEEP		= 0x0b,	// lie down (not all have this)
	ANIM_ANI_DIE2		= 0x0c,

	ANIM_QTY_ANI = 13,

	ANIM_QTY = 0x32
};
enum ANIM_TYPE_NEW	// not all creatures animate the same for some reason. http://img546.imageshack.us/img546/5439/uonewanimstable2.png
{
	NANIM_ATTACK		= 0x00,	// 8 SUB ANIMATIONS, VARIATION 0-*
	NANIM_BLOCK			= 0x01,			// VARIATION 0-1
	NANIM_BLOCK2		= 0x02,			// MONSTERS, VARIATION 0-1
	NANIM_DEATH			= 0x03,			// VARIATION 0-1
	NANIM_GETHIT		= 0x04,			// VARIATION 0-*
	NANIM_IDLE			= 0x05,
	NANIM_EAT			= 0x06,
	NANIM_EMOTE			= 0x07,			// 2 SUB ANIMATIONS
	NANIM_ANGER			= 0x08,
	NANIM_TAKEOFF		= 0x09,
	NANIM_LANDING		= 0x0a,
	NANIM_SPELL			= 0x0b,			// 2 SUB ANIMATIONS
	NANIM_UNKNOWN1		= 0x0c,			// According to RUOSI now this is StartCombat
	NANIM_UNKNOWN2		= 0x0d,			// and this one EndCombat (Maybe only for EC?)
	NANIM_PILLAGE		= 0x0e,			// Human/Animal (eat), Monster (pillage)
	NANIM_RISE			= 0x0f,			// Used on character creation (Only EC)
	
	NANIM_QTY = 16,

	NANIM_ATTACK_WRESTLING	= 0x00,
	NANIM_ATTACK_BOW		= 0x01,
	NANIM_ATTACK_CROSSBOW	= 0x02,
	NANIM_ATTACK_1H_BASH	= 0x03,
	NANIM_ATTACK_1H_SLASH	= 0x04,
	NANIM_ATTACK_1H_PIERCE	= 0x05,
	NANIM_ATTACK_2H_BASH	= 0x06,
	NANIM_ATTACK_2H_SLASH	= 0x07,
	NANIM_ATTACK_2H_PIERCE	= 0x08,
	NANIM_ATTACK_THROWING	= 0x09,

	NANIM_ATTACK_QTY = 10,

	NANIM_EMOTE_BOW		= 0x00,
	NANIM_EMOTE_SALUTE	= 0x01,
	
	NANIM_EMOTE_QTY = 2,

	NANIM_SPELL_NORMAL	= 0x00,
	NANIM_SPELL_SUMMON	= 0x01,

	NANIM_SPELL_QTY = 2,

};

enum CRESND_TYPE	// Creature sound offset types.
{	// Some creatures have no random sounds. others (humans,birds) have many sounds.
	CRESND_RAND1 = 0,	// just random noise. or "yes"
	CRESND_RAND2,		// "no" response
	CRESND_HIT,
	CRESND_GETHIT,
	CRESND_DIE
};

enum FONT_TYPE
{
	FONT_BOLD,		// 0 - Bold Text = Large plain filled block letters.
	FONT_SHAD,		// 1 - Text with shadow = small gray
	FONT_BOLD_SHAD,	// 2 - Bold+Shadow = Large Gray block letters.
	FONT_NORMAL,	// 3 - Normal (default) = Filled block letters.
	FONT_GOTH,		// 4 - Gothic = Very large blue letters.
	FONT_ITAL,		// 5 - Italic Script
	FONT_SM_DARK,	// 6 - Small Dark Letters = small Blue
	FONT_COLOR,		// 7 - Colorful Font (Buggy?) = small Gray (hazy)
	FONT_RUNE,		// 8 - Rune font (Only use capital letters with this!)
	FONT_SM_LITE,	// 9 - Small Light Letters = small roman gray font.
	FONT_QTY
};

enum AFFIX_TYPE
{
	AFFIX_APPEND  = 0x0,	// 0 - Append affix to end of message
	AFFIX_PREPEND = 0x1,	// 1 - Prepend affix to front of message
	AFFIX_SYSTEM  = 0x2		// 2 - Message is displayed as a system message
};

enum DIR_TYPE	// Walking directions. m_dir
{
	DIR_INVALID = -1,

	DIR_N = 0,
	DIR_NE,
	DIR_E,
	DIR_SE,
	DIR_S,
	DIR_SW,
	DIR_W,
	DIR_NW,
	DIR_QTY,		// Also means "Center"

	DIR_ANIM_QTY = 5	// Seems we only need 5 pics for an anim, assume ALL bi-symetrical creatures
};

enum SKILL_TYPE	// List of skill numbers (things that can be done at a given time)
{
	SKILL_NONE = -1,

	SKILL_ALCHEMY = 0,
	SKILL_ANATOMY,
	SKILL_ANIMALLORE,
	SKILL_ITEMID,
	SKILL_ARMSLORE,
	SKILL_PARRYING,
	SKILL_BEGGING,
	SKILL_BLACKSMITHING,
	SKILL_BOWCRAFT,
	SKILL_PEACEMAKING,
	SKILL_CAMPING,	// 10
	SKILL_CARPENTRY,
	SKILL_CARTOGRAPHY,
	SKILL_COOKING,
	SKILL_DETECTINGHIDDEN,
	SKILL_ENTICEMENT,
	SKILL_EVALINT,
	SKILL_HEALING,
	SKILL_FISHING,
	SKILL_FORENSICS,
	SKILL_HERDING,	// 20
	SKILL_HIDING,
	SKILL_PROVOCATION,
	SKILL_INSCRIPTION,
	SKILL_LOCKPICKING,
	SKILL_MAGERY,		// 25
	SKILL_MAGICRESISTANCE,
	SKILL_TACTICS,
	SKILL_SNOOPING,
	SKILL_MUSICIANSHIP,
	SKILL_POISONING,	// 30
	SKILL_ARCHERY,
	SKILL_SPIRITSPEAK,
	SKILL_STEALING,
	SKILL_TAILORING,
	SKILL_TAMING,
	SKILL_TASTEID,
	SKILL_TINKERING,
	SKILL_TRACKING,
	SKILL_VETERINARY,
	SKILL_SWORDSMANSHIP,	// 40
	SKILL_MACEFIGHTING,
	SKILL_FENCING,
	SKILL_WRESTLING,		// 43
	SKILL_LUMBERJACKING,
	SKILL_MINING,
	SKILL_MEDITATION,
	SKILL_STEALTH,			// 47
	SKILL_REMOVETRAP,		// 48

#define SKILL_AOS SKILL_NECROMANCY
	SKILL_NECROMANCY,
	SKILL_FOCUS,			// 50
	SKILL_CHIVALRY,			// 51

#define SKILL_SE SKILL_BUSHIDO
	SKILL_BUSHIDO,
	SKILL_NINJITSU,			// 53

#define SKILL_ML SKILL_SPELLWEAVING
	SKILL_SPELLWEAVING = 54,		// 54
 
#define SKILL_SA SKILL_IMBUEING
	SKILL_MYSTICISM = 55,	// 55
	SKILL_IMBUING,
	SKILL_THROWING,
	SKILL_DEFAULT_MAX = 57,
	

#define SKILL_SCRIPTED SKILL_SCRIPTED00
	SKILL_SCRIPTED00,		// 58
	SKILL_SCRIPTED01,
	SKILL_SCRIPTED02,
	SKILL_SCRIPTED03,
	SKILL_SCRIPTED04,
	SKILL_SCRIPTED05,
	SKILL_SCRIPTED06,
	SKILL_SCRIPTED07,
	SKILL_SCRIPTED08,
	SKILL_SCRIPTED09,
	SKILL_SCRIPTED10,		// 68
	SKILL_SCRIPTED11,
	SKILL_SCRIPTED12,
	SKILL_SCRIPTED13,
	SKILL_SCRIPTED14,
	SKILL_SCRIPTED15,
	SKILL_SCRIPTED16,
	SKILL_SCRIPTED17,
	SKILL_SCRIPTED18,
	SKILL_SCRIPTED19,
	SKILL_QTY,				// 78

	// Actions a npc will perform. (no need to track skill level for these)
	NPCACT_FOLLOW_TARG = 100,	// 100 = following a char.
	NPCACT_STAY,			// 101
	NPCACT_GOTO,			// 102 = Go to a location x,y. Pet command
	NPCACT_WANDER,			// 103 = Wander aimlessly.
	NPCACT_LOOKING,			// 104 = just look around intently.
	NPCACT_FLEE,			// 105 = Run away from target. m_Act_Targ
	NPCACT_TALK,			// 106 = Talking to my target. m_Act_Targ
	NPCACT_TALK_FOLLOW,		// 107 = m_Act_Targ / m_Fight_Targ.
	NPCACT_GUARD_TARG,		// 108 = Guard a targetted object. m_Act_Targ
	NPCACT_GO_HOME,			// 109 =
	NPCACT_BREATH,			// 110 = Using breath weapon. on m_Fight_Targ.
	NPCACT_RIDDEN,			// 111 = Being ridden or shrunk as figurine.
	NPCACT_THROWING,		// 112 = Throwing a stone at m_Fight_Targ.
	NPCACT_TRAINING,		// 113 = using a training dummy etc.
	NPCACT_Napping,			// 114 = just snoozong a little bit, but not sleeping.
	NPCACT_FOOD,			// 115 = Searching for food
	NPCACT_RUNTO,			// 116 = Run to a location x,y.
	NPCACT_QTY
};

enum LAYER_TYPE		// defined by UO. Only one item can be in a slot.
{
	LAYER_NONE = 0,	// spells that are layed on the CChar ?
	LAYER_HAND1,	// 1 = spellbook or weapon.
	LAYER_HAND2,	// 2 = other hand or 2 handed thing. = shield
	LAYER_SHOES,	// 3
	LAYER_PANTS,	// 4 = bone legs + pants.
	LAYER_SHIRT,
	LAYER_HELM,		// 6
	LAYER_GLOVES,	// 7
	LAYER_RING,
	LAYER_TALISMAN,	// 9 = talisman item (it was _LIGHT)
	LAYER_COLLAR,	// 10 = gorget or necklace.
	LAYER_HAIR,		// 11 = 0x0b =
	LAYER_HALF_APRON,// 12 = 0x0c =
    LAYER_CHEST,	// 13 = 0x0d = armor chest
	LAYER_WRIST,	// 14 = 0x0e = watch
	LAYER_NEWLIGHT,	// 15 = Unused (use it for: a ITEMID_LIGHT_SRC equip item can be put here.)
	LAYER_BEARD,	// 16 = try to have only men have this.
	LAYER_TUNIC,	// 17 = jester suit or full apron.
	LAYER_EARS,		// 18 = earrings
    LAYER_ARMS,		// 19 = armor
	LAYER_CAPE,		// 20 = cape
	LAYER_PACK,		// 21 = 0x15 = only used by ITEMID_BACKPACK
	LAYER_ROBE,		// 22 = robe over all.
    LAYER_SKIRT,	// 23 = skirt or kilt.
    LAYER_LEGS,		// 24= 0x18 = plate legs.

#define LAYER_IS_VISIBLE(layer) ((layer)> LAYER_NONE && (layer) <= LAYER_HORSE )

	// These are not part of the paper doll (but get sent to the client)
	LAYER_HORSE,		// 25 = 0x19 = ride this object. (horse objects are strange?)
	LAYER_VENDOR_STOCK,	// 26 = 0x1a = the stuff the vendor will restock and sell to the players
	LAYER_VENDOR_EXTRA,	// 27 = 0x1b = the stuff the vendor will resell to players but is not restocked. (bought from players)
	LAYER_VENDOR_BUYS,	// 28 = 0x1c = the stuff the vendor can buy from players but does not stock.
	LAYER_BANKBOX,		// 29 = 0x1d = contents of my bank box.

	// Internally used layers - Don't bother sending these to client.
	LAYER_SPECIAL,		// 30 =	Can be multiple of these. memories
	LAYER_DRAGGING,

	// Spells that are effecting us go here.
	LAYER_SPELL_STATS,			// 32 = Stats effecting spell. These cancel each other out.
	LAYER_SPELL_Reactive,		// 33 =
	LAYER_SPELL_Night_Sight,
	LAYER_SPELL_Protection,		// 35
	LAYER_SPELL_Incognito,
	LAYER_SPELL_Magic_Reflect,
	LAYER_SPELL_Paralyze,		// or turned to stone.
	LAYER_SPELL_Invis,
	LAYER_SPELL_Polymorph,		// 40
	LAYER_SPELL_Summon,			// 41 = magical summoned creature.

	LAYER_FLAG_Poison,			// 42
	LAYER_FLAG_Criminal,		// criminal or murderer ? decay over time
	LAYER_FLAG_Potion,			// Some magic type effect done by a potion. (they cannot be dispelled)
	LAYER_FLAG_SpiritSpeak,		// 45
	LAYER_FLAG_Wool,			// regrowing wool.
	LAYER_FLAG_Drunk,			// Booze effect.
	LAYER_FLAG_ClientLinger,	// 48
	LAYER_FLAG_Hallucination,	// shrooms etc.
	LAYER_FLAG_PotionUsed,		// 50 = track the time till we can use a potion again.
	LAYER_FLAG_Stuck,			// In a trap or web.
	LAYER_FLAG_Murders,			// How many murders do we have ? decay over time
	LAYER_FLAG_Bandage,			// 53 = Bandages go here for healing

	LAYER_AUCTION,				// Auction layer

	//Necro
	LAYER_SPELL_Blood_Oath,
	LAYER_SPELL_Curse_Weapon,
	LAYER_SPELL_Corpse_Skin,
	LAYER_SPELL_Evil_Omen,
	LAYER_SPELL_Pain_Spike,
	LAYER_SPELL_Mind_Rot,
	LAYER_SPELL_Strangle,

	//Ninjitsu
	//LAYER_SPELL_Surprise_Attack,

	//Chivalry
	LAYER_SPELL_Consecrate_Weapon,
	LAYER_SPELL_Divine_Fury,
	LAYER_SPELL_Enemy_Of_One,

	//SpellWeaving
	LAYER_SPELL_Attunement,
	LAYER_SPELL_Gift_Of_Renewal,
	LAYER_SPELL_Immolating_Weapon,
	LAYER_SPELL_Thunderstorm,
	LAYER_SPELL_Arcane_Empowerment,
	LAYER_SPELL_Ethereal_Voyage,
	LAYER_SPELL_Gift_Of_Life,
	LAYER_SPELL_Dryad_Allure,
	LAYER_SPELL_Essence_Of_Wind,

	//Mysticism
	LAYER_SPELL_Sleep,
	LAYER_SPELL_Bombard,
	LAYER_SPELL_Spell_Plague,
	LAYER_SPELL_Nether_Cyclone,
	
	LAYER_QTY
};

enum SPELL_TYPE	// List of spell numbers in spell book.
{
	SPELL_NONE = 0,

	// Magery
	SPELL_Clumsy = 1,		// 1st circle
	SPELL_Create_Food,
	SPELL_Feeblemind,
	SPELL_Heal,
	SPELL_Magic_Arrow,
	SPELL_Night_Sight,
	SPELL_Reactive_Armor,
	SPELL_Weaken,
	SPELL_Agility,			// 2nd circle
	SPELL_Cunning,
	SPELL_Cure,
	SPELL_Harm,
	SPELL_Magic_Trap,
	SPELL_Magic_Untrap,
	SPELL_Protection,
	SPELL_Strength,
	SPELL_Bless,			// 3rd circle
	SPELL_Fireball,
	SPELL_Magic_Lock,
	SPELL_Poison,
	SPELL_Telekin,
	SPELL_Teleport,
	SPELL_Unlock,
	SPELL_Wall_of_Stone,
	SPELL_Arch_Cure,		// 4th circle
	SPELL_Arch_Prot,
	SPELL_Curse,
	SPELL_Fire_Field,
	SPELL_Great_Heal,
	SPELL_Lightning,
	SPELL_Mana_Drain,
	SPELL_Recall,
	SPELL_Blade_Spirit,		// 5th circle
	SPELL_Dispel_Field,
	SPELL_Incognito,
	SPELL_Magic_Reflect,
	SPELL_Mind_Blast,
	SPELL_Paralyze,
	SPELL_Poison_Field,
	SPELL_Summon,
	SPELL_Dispel,			// 6th circle
	SPELL_Energy_Bolt,
	SPELL_Explosion,
	SPELL_Invis,
	SPELL_Mark,
	SPELL_Mass_Curse,
	SPELL_Paralyze_Field,
	SPELL_Reveal,
	SPELL_Chain_Lightning,	// 7th circle
	SPELL_Energy_Field,
	SPELL_Flame_Strike,
	SPELL_Gate_Travel,
	SPELL_Mana_Vamp,
	SPELL_Mass_Dispel,
	SPELL_Meteor_Swarm,
	SPELL_Polymorph,
	SPELL_Earthquake,		// 8th circle
	SPELL_Vortex,
	SPELL_Resurrection,
	SPELL_Air_Elem,
	SPELL_Daemon,
	SPELL_Earth_Elem,
	SPELL_Fire_Elem,
	SPELL_Water_Elem,
	SPELL_MAGERY_QTY = SPELL_Water_Elem,

	// Necromancy (AOS)
	SPELL_Animate_Dead_AOS = 101,
	SPELL_Blood_Oath,
	SPELL_Corpse_Skin,
	SPELL_Curse_Weapon,
	SPELL_Evil_Omen,
	SPELL_Horrific_Beast,
	SPELL_Lich_Form,
	SPELL_Mind_Rot,
	SPELL_Pain_Spike,
	SPELL_Poison_Strike,
	SPELL_Strangle,
	SPELL_Summon_Familiar,
	SPELL_Vampiric_Embrace,
	SPELL_Vengeful_Spirit,
	SPELL_Wither,
	SPELL_Wraith_Form,
	SPELL_Exorcism,
	SPELL_NECROMANCY_QTY = SPELL_Exorcism,

	// Chivalry (AOS)
	SPELL_Cleanse_by_Fire = 201,
	SPELL_Close_Wounds,
	SPELL_Consecrate_Weapon,
	SPELL_Dispel_Evil,
	SPELL_Divine_Fury,
	SPELL_Enemy_of_One,
	SPELL_Holy_Light,
	SPELL_Noble_Sacrifice,
	SPELL_Remove_Curse,
	SPELL_Sacred_Journey,
	SPELL_CHIVALRY_QTY = SPELL_Sacred_Journey,

	// Bushido (SE)
	SPELL_Honorable_Execution = 401,
	SPELL_Confidence,
	SPELL_Evasion,
	SPELL_Counter_Attack,
	SPELL_Lightning_Strike,
	SPELL_Momentum_Strike,
	SPELL_BUSHIDO_QTY = SPELL_Momentum_Strike,

	// Ninjitsu (SE)
	SPELL_Focus_Attack = 501,
	SPELL_Death_Strike,
	SPELL_Animal_Form,
	SPELL_Ki_Attack,
	SPELL_Surprise_Attack,
	SPELL_Backstab,
	SPELL_Shadowjump,
	SPELL_Mirror_Image,
	SPELL_NINJITSU_QTY = SPELL_Mirror_Image,

	// Spellweaving (ML)
	SPELL_Arcane_Circle = 601,
	SPELL_Gift_of_Renewal,
	SPELL_Immolating_Weapon,
	SPELL_Attunement,
	SPELL_Thunderstorm,
	SPELL_Natures_Fury,
	SPELL_Summon_Fey,
	SPELL_Summon_Fiend,
	SPELL_Reaper_Form,
	SPELL_Wildfire,
	SPELL_Essence_of_Wind,
	SPELL_Dryad_Allure,
	SPELL_Ethereal_Voyage,
	SPELL_Word_of_Death,
	SPELL_Gift_of_Life,
	SPELL_Arcane_Empowerment,
	SPELL_SPELLWEAVING_QTY = SPELL_Arcane_Empowerment,

	// Mysticism (SA)
	SPELL_Nether_Bolt = 678,
	SPELL_Healing_Stone,
	SPELL_Enchant_Weapon,
	SPELL_Sleep,
	SPELL_Eagle_Strike,
	SPELL_Animated_Weapon,
	SPELL_Stone_Form,
	SPELL_Spell_Trigger,
	SPELL_Mass_Sleep,
	SPELL_Cleansing_Winds,
	SPELL_Bombard,
	SPELL_Spell_Plague,
	SPELL_Hail_Storm,
	SPELL_Nether_Cyclone,
	SPELL_Rising_Collossus,
	SPELL_MYSTICISM_QTY = SPELL_Rising_Collossus,

	// Bard (SA)
	SPELL_Inspire = 701,
	SPELL_Invigorate,
	SPELL_Resilience,
	SPELL_Perseverance,
	SPELL_Tribulation,
	SPELL_Despair,
	SPELL_BARD_QTY = SPELL_Despair,

	// Custom Sphere spells (used by some monsters)
	SPELL_Summon_Undead = 1000,
	SPELL_Animate_Dead,
	SPELL_Bone_Armor,
	SPELL_Light,
	SPELL_Fire_Bolt,
	SPELL_Hallucination,
	SPELL_CUSTOM_QTY = SPELL_Hallucination,

	// Custom extra special spells (can be used as potion effects as well). Commented value = old index.
	SPELL_Stone,			// 71 = Turn to stone (permanent).
	SPELL_Shrink,			// 72 = turn pet into icon.
	SPELL_Refresh,			// 73 = stamina
	SPELL_Restore,			// 74 = This potion increases both your hit points and your stamina.
	SPELL_Mana,				// 75 = restone mana
	SPELL_Sustenance,		// 76 = serves to fill you up. (Remember, healing rate depends on how well fed you are!)
	SPELL_Chameleon,		// 77 = makes your skin match the colors of whatever is behind you.
	SPELL_BeastForm,		// 78 = polymorphs you into an animal for a while.
	SPELL_Monster_Form,		// 79 = polymorphs you into a monster for a while.
	SPELL_Gender_Swap,		// 81 = permanently changes your gender.
	SPELL_Trance,			// 82 = temporarily increases your meditation skill.
	SPELL_Particle_Form,	// 83 = turns you into an immobile, but untargetable particle system for a while.
	SPELL_Shield,			// 84 = erects a temporary force field around you. Nobody approaching will be able to get within 1 tile of you, though you can move close to them if you wish.
	SPELL_Steelskin,		// 85 = turns your skin into steel, giving a boost to your AR.
	SPELL_Stoneskin,		// 86 = turns your skin into stone, giving a boost to your AR.
	SPELL_Regenerate,		// 87 = regen hitpoints at a fast rate.
	SPELL_Enchant,			// 88 = Enchant an item (weapon or armor)
	SPELL_Forget,			// 89 = only existed in sphere_spells.scp before
	SPELL_Ale,				// 90 = drunkeness ?
	SPELL_Wine,				// 91 = mild drunkeness ?
	SPELL_Liquor,			// 92 = extreme drunkeness ?
	SPELL_QTY = SPELL_Liquor
};

enum LIGHT_PATTERN	// What pattern (m_light_pattern) does the light source (CAN_LIGHT) take.
{
	LIGHT_LARGE = 1,
	// ... etc
	// Colored light is in here some place as well.
	LIGHT_QTY = 56	// This makes it go black.
};

enum GUMP_TYPE	// The gumps. (most of these are not useful to the server.)
{
	GUMP_NONE				= 0,
	GUMP_RESERVED			= 1,

	GUMP_CORPSE				= 0x09,
	GUMP_VENDOR_RECT		= 0x30,	// Big blue rectangle for vendor mask.
	GUMP_PACK				= 0x3c,	// Open backpack
	GUMP_BAG				= 0x3D,	// Leather Bag
	GUMP_BARREL				= 0x3E,	// Barrel
	GUMP_BASKET_SQ			= 0x3F,	// Square picknick Basket
	GUMP_BOX_WOOD			= 0x40,	// Small wood box with a lock
	GUMP_BASKET_RO			= 0x41,	// Round Basket
	GUMP_CHEST_GO_SI		= 0x42,	// Gold and Silver Chest.
	GUMP_BOX_WOOD_OR		= 0x43,	// Small wood box (ornate)(no lock)
	GUMP_CRATE				= 0x44,	// Wood Crate
	GUMP_DRAWER_DK			= 0x48,
	GUMP_CHEST_WO_GO		= 0x49,	// Wood with gold trim
	GUMP_CHEST_SI			= 0x4a,	// Silver chest
	GUMP_BOX_GO_LO			= 0x4b,	// Gold/Brass box with a lock
	GUMP_SHIP_HOLD			= 0x4c,
	GUMP_BOOK_SHELF			= 0x4d,
	GUMP_CABINET_DK			= 0x4e,
	GUMP_CABINET_LT			= 0x4f,
	GUMP_DRAWER_LT			= 0x51,
	GUMP_GIFT_BOX			= 0x102,
	GUMP_ARMOIRE_RED		= 0x105,
	GUMP_ARMOIRE_MAPLE		= 0x106,
	GUMP_ARMOIRE_CHERRY		= 0x107,
	GUMP_BASKET_TALL		= 0x108,
	GUMP_CHEST_WOOD_PLAIN	= 0x109,
	GUMP_CHEST_WOOD_GILDED	= 0x10A,
	GUMP_CHEST_WOOD_ORNATE	= 0x10B,
	GUMP_TALL_CABINET		= 0x10C,
	GUMP_CHEST_WOOD_FINISH	= 0x10D,
	GUMP_HEART_SHAPED		= 0x120,

	GUMP_SECURE_TRADE		= 0x866,
	GUMP_VENDOR_1			= 0x870,
	GUMP_GAME_BOARD			= 0x91a,	// Chess or checker board.
	GUMP_GAME_BACKGAM		= 0x92e,	// backgammon board.
	GUMP_MAP_2_NORTH		= 0x139d,
	GUMP_QTY				= 0xfffe,
	GUMP_OPEN_SPELLBOOK		= 0xFFFF
};

typedef WORD		TERRAIN_TYPE;
enum
{
	// Terrain samples
	TERRAIN_HOLE	= 0x0002,	// "NODRAW" we can pas thru this.

	TERRAIN_WATER1	= 0x00a8,
	TERRAIN_WATER2	= 0x00a9,
	TERRAIN_WATER3	= 0x00aa,
	TERRAIN_WATER4	= 0x00ab,
	TERRAIN_WATER5	= 0x0136,
	TERRAIN_WATER6	= 0x0137,

	TERRAIN_NULL	= 0x0244,	// impassible interdungeon

	TERRAIN_QTY     = 0x4000	// Terrain tile qyt
};

/////////////////////////////////////////////////////////////////
// File blocks

#define VERDATA_MAKE_INDEX( f, i ) ((f+1)<< 26 | (i))

enum VERFILE_TYPE		// skew list. (verdata.mul)
{
	VERFILE_ARTIDX		= 0x00,	// "artidx.mul" = Index to ART
	VERFILE_ART			= 0x01, // "art.mul" = Artwork such as ground, objects, etc.
	VERFILE_ANIMIDX		= 0x02,	// "anim.idx" = 2454ah animations.
	VERFILE_ANIM		= 0x03,	// "anim.mul" = Animations such as monsters, people, and armor.
	VERFILE_SOUNDIDX	= 0x04, // "soundidx.mul" = Index into SOUND
	VERFILE_SOUND		= 0x05, // "sound.mul" = Sampled sounds
	VERFILE_TEXIDX		= 0x06, // "texidx.mul" = Index into TEXMAPS
	VERFILE_TEXMAPS		= 0x07,	// "texmaps.mul" = Texture map data (the ground).
	VERFILE_GUMPIDX		= 0x08, // "gumpidx.mul" = Index to GUMPART
	VERFILE_GUMPART		= 0x09, // "gumpart.mul" = Gumps. Stationary controller bitmaps such as windows, buttons, paperdoll pieces, etc.
	VERFILE_MULTIIDX	= 0x0A,	// "multi.idx" = Index to MULTI
	VERFILE_MULTI		= 0x0B,	// "multi.mul" = Groups of art (houses, castles, etc)
	VERFILE_SKILLSIDX	= 0x0C, // "skills.idx" =
	VERFILE_SKILLS		= 0x0D, // "skills.mul" =
	VERFILE_VERDATA		= 0x0E, // ? "verdata.mul" = This version file.
	//	maps
	VERFILE_MAP			= 0x0F, // MAP*.mul(s)
	VERFILE_STAIDX		= 0x13, // STAIDX*.mul(s)
	VERFILE_STATICS		= 0x17,	// STATICS*.mul(s)
	// empty			= 0x10, // "map2.mul"
	// empty			= 0x11, // "map3.mul"
	// empty			= 0x12, // "map4.mul"
	// empty			= 0x14, // "staidx2.mul"
	// empty			= 0x15, // "staidx3.mul"
	// empty			= 0x16, // "staidx4.mul"
	// empty			= 0x18, // "statics2.mul"
	// empty			= 0x19, // "statics3.mul"
	// empty			= 0x1A, // "statics4.mul"
	// empty			= 0x1B space for new map
	// empty			= 0x1C space for new map
	// empty			= 0x1D space for new map

	VERFILE_TILEDATA	= 0x1E, // "tiledata.mul" = Data about tiles in ART. name and flags, etc
	VERFILE_ANIMDATA	= 0x1F, // "animdata.mul" = ? no idea, might be item animation ?.
	VERFILE_HUES		= 0x20, // ? "hues.mul"
	VERFILE_QTY					// NOTE: 021 is used for something ?!
};

enum VERFILE_FORMAT	// mul formats
{
	VERFORMAT_ORIGINAL = 0x01,	// original mul format
	VERFORMAT_HIGHSEAS = 0x02,	// high seas mul format
	VERFORMAT_QTY
};

struct CUOVersionBlock	// skew list. (verdata.mul)
{
	// First 4 bytes of this file = the qty of records.
private:
	DWORD m_file;		// file type id. VERFILE_TYPE (ex.tiledata = 0x1E)
	DWORD m_block;		// tile number. ( items = itemid + 0x200 )
public:
	DWORD m_filepos;	// pos in this file to find the patch block.
	DWORD m_length;

	WORD  m_wVal3;		// stuff that would have been in CUOIndexRec
	WORD  m_wVal4;
public:
	DWORD GetIndex() const	// a single sortable index.
	{
		return( VERDATA_MAKE_INDEX( m_file, m_block ));
	}
	VERFILE_TYPE GetFileIndex() const
	{
		return( static_cast<VERFILE_TYPE>(m_file) );
	}
	DWORD GetBlockIndex() const
	{
		return( m_block );
	}
	// This stuff is for GrayPatch
	void SetBlock(DWORD dwBlock)
	{
		m_block = dwBlock;
	}
	void SetFile(VERFILE_TYPE dwFile)
	{
		m_file = dwFile;
	}

} PACK_NEEDED;

struct CUOIndexRec	// 12 byte block = used for table indexes. (staidx0.mul,multi.idx,anim.idx)
{
private:
	DWORD	m_dwOffset;	// 0xFFFFFFFF = nothing here ! else pointer to something (CUOStaticItemRec possibly)
	DWORD 	m_dwLength; // Length of the object in question.
public:
	WORD 	m_wVal3;	// Varied uses. ex. GumpSizey
	WORD 	m_wVal4;	// Varied uses. ex. GumpSizex

public:
	DWORD GetFileOffset() const
	{
		return( m_dwOffset );
	}
	DWORD GetBlockLength() const
	{
		return( m_dwLength &~ 0x80000000 );
	}
	bool IsVerData() const
	{
		return( ( m_dwLength & 0x80000000 ) ? true : false );
	}
	bool HasData() const
	{
		return( m_dwOffset != 0xFFFFFFFF && m_dwLength != 0 );
	}
	void Init()
	{
		m_dwLength = 0;
	}
	void CopyIndex( const CUOVersionBlock * pVerData )
	{
		// Get an index rec from the verdata rec.
		m_dwOffset = pVerData->m_filepos;
		m_dwLength = pVerData->m_length | 0x80000000;
		m_wVal3 = pVerData->m_wVal3;
		m_wVal4 = pVerData->m_wVal4;
	}
	void SetupIndex( DWORD dwOffset, DWORD dwLength )
	{
		m_dwOffset = dwOffset;
		m_dwLength = dwLength;
	}

} PACK_NEEDED;

// Map definition.

#define UO_BLOCK_SIZE		8       // Base width/height size of a block.
#define UO_BLOCK_ALIGN(i) 	((i) &~ 7 )
#define UO_BLOCK_OFFSET(i)	((i) & 7 )	// i%UO_BLOCK_SIZE
#define UO_SIZE_Z			127
#define UO_SIZE_MIN_Z		-127

typedef unsigned char height_t;

class CMapDiffCollection;

extern class CMapList
{
public:
	int m_sizex[256];
	int m_sizey[256];
	int m_sectorsize[256];
	bool m_maps[256];			// list of supported maps
	int m_mapnum[256];			// real map number (0 for 0 and 1, 2 for 2, and so on) - file name
	int m_mapid[256];			// map id used by the client
	CMapDiffCollection * m_pMapDiffCollection;

protected:
	bool m_mapsinitalized[256];
	bool DetectMapSize(int map);

public:
	CMapList();

private:
	CMapList(const CMapList& copy);
	CMapList& operator=(const CMapList& other);

public:
	bool Load(int map, char *args);
	bool Load(int map, int maxx, int maxy, int sectorsize, int realmapnum, int mapid);

	void Init();

	bool IsMapSupported(int map)
	{
		if (( map < 0 ) || ( map > 255 )) return( false );
		return( m_maps[map] );
	}

	int GetX(int map)
	{
		if (( map < 0 ) || ( map > 255 )) return 0;
		return m_sizex[map];
	}
	int GetY(int map)
	{
		if (( map < 0 ) || ( map > 255 )) return 0;
		return m_sizey[map];
	}
	int GetCenterX(int map)
	{
		if (( map < 0 ) || ( map > 255 )) return 0;
		return (m_sizex[map]/2);
	}
	int GetCenterY(int map)
	{
		if (( map < 0 ) || ( map > 255 )) return 0;
		return (m_sizey[map]/2);
	}
	int GetSectorSize(int map)
	{
		if (( map < 0 ) || ( map > 255 )) return 0;
		return m_sectorsize[map];
	}
	int GetSectorCols(int map)
	{
		if (( map < 0 ) || ( map > 255 )) return 0;
		return (m_sizex[map] / GetSectorSize(map));
	}
	int GetSectorRows(int map)
	{
		if (( map < 0 ) || ( map > 255 )) return 0;
		return (m_sizey[map] / GetSectorSize(map));
	}
	int GetSectorQty(int map)
	{
		return ( GetSectorCols(map) * GetSectorRows(map) );
	}

	bool IsInitialized(int map)
	{
		return (m_mapsinitalized[map]);
	}
} g_MapList;

#define UO_SIZE_X_REAL		0x1400	// 640*UO_BLOCK_SIZE = 5120 = The actual world is only this big

// This should depend on height of players char.
#define PLAYER_HEIGHT 15	// We need x units of room to walk under something. (human) ??? this should vary based on creature type.

struct CUOMapMeter	// 3 bytes (map0.mul)
{
	WORD m_wTerrainIndex;	// TERRAIN_TYPE index to Radarcol and CUOTerrainTypeRec/CUOTerrainTypeRec2
	signed char m_z;
	static bool IsTerrainNull( WORD wTerrainIndex )
	{
		switch ( wTerrainIndex )
		{
			case 0x244: //580
				return true;
		}
		return false;
	}
} PACK_NEEDED;

struct CUOMapBlock	// 196 byte block = 8x8 meters, (map0.mul)
{
	WORD m_wID1;	// ?
	WORD m_wID2;
	CUOMapMeter m_Meter[ UO_BLOCK_SIZE * UO_BLOCK_SIZE ];
} PACK_NEEDED;

struct CUOStaticItemRec	// 7 byte block = static items on the map (statics0.mul)
{
	WORD	m_wTileID;		// ITEMID_TYPE = Index to tile CUOItemTypeRec/CUOItemTypeRec2
	BYTE	m_x;		// x <= 7 = offset from block.
	BYTE 	m_y;		// y <= 7
	signed char m_z;	//
	WORD 	m_wHue;		// HUE_TYPE modifier for the item

	// For internal caching purposes only. overload this.
	// LOBYTE(m_wColor) = Blocking flags for this item. (CAN_I_BLOCK)
	// HIBYTE(m_wColor) = Height of this object.

	ITEMID_TYPE GetDispID() const
	{
		return static_cast<ITEMID_TYPE>(m_wTileID);
	}

} PACK_NEEDED;

#define UOTILE_BLOCK_QTY	32	// Come in blocks of 32.

struct CUOTerrainTypeRec	// size = 0x1a = 26 (tiledata.mul)
{	
	// First half of tiledata.mul file is for terrain tiles.
	DWORD m_flags;	// 0xc0=water, 0x40=dirt or rock, 0x60=lava, 0x50=cave, 0=floor
	WORD m_index;	// just counts up.  0 = unused.
	char m_name[20];

} PACK_NEEDED;

struct CUOTerrainTypeRec2	// size = 0x1e = 30 (tiledata.mul, High Seas+)
{
	// First half of tiledata.mul file is for terrain tiles.
	DWORD m_flags;	// 0xc0=water, 0x40=dirt or rock, 0x60=lava, 0x50=cave, 0=floor
	DWORD m_unknown;
	WORD m_index;	// just counts up.  0 = unused.
	char m_name[20];
} PACK_NEEDED;

struct CGrayTerrainInfo : public CUOTerrainTypeRec2
{
	CGrayTerrainInfo( TERRAIN_TYPE id );
};

	// 0x68800 = (( 0x4000 / 32 ) * 4 ) + ( 0x4000 * 26 )
#define UOTILE_TERRAIN_SIZE ((( TERRAIN_QTY / UOTILE_BLOCK_QTY ) * 4 ) + ( TERRAIN_QTY * sizeof( CUOTerrainTypeRec )))

	// 0x78800 = (( 0x4000 / 32 ) * 4 ) + ( 0x4000 * 30 )
#define UOTILE_TERRAIN_SIZE2 ((( TERRAIN_QTY / UOTILE_BLOCK_QTY ) * 4 ) + ( TERRAIN_QTY * sizeof( CUOTerrainTypeRec2 )))

struct CUOItemTypeRec	// size = 37 (tiledata.mul)
{	// Second half of tiledata.mul file is for item tiles (ITEMID_TYPE).
	// if all entries are 0 then this is unused and undisplayable.
#define UFLAG1_FLOOR		0x00000001	// 0= floor (Walkable at base position)
#define UFLAG1_EQUIP		0x00000002	// 1= equipable. m_layer is LAYER_TYPE
#define UFLAG1_NONBLOCKING	0x00000004	// 2= Signs and railings that do not block.
#define UFLAG1_LIQUID		0x00000008	// 3= blood,Wave,Dirt,webs,stain, (translucent items)
#define UFLAG1_WALL			0x00000010	// 4= wall type = wall/door/fireplace
#define UFLAG1_DAMAGE		0x00000020	// 5= damaging. (Sharp, hot or poisonous)
#define UFLAG1_BLOCK		0x00000040	// 6= blocked for normal human. (big and heavy)
#define UFLAG1_WATER		0x00000080	// 7= water/wet (blood/water)
#define UFLAG2_ZERO1		0x00000100	// 8= NOT USED (i checked)
#define UFLAG2_PLATFORM		0x00000200	// 9= platform/flat (can stand on, bed, floor, )
#define UFLAG2_CLIMBABLE	0x00000400	// a= climbable (stairs). m_height /= 2(For Stairs+Ladders)
#define UFLAG2_STACKABLE	0x00000800	// b= pileable/stackable (m_dwUnk7 = stack size ?)
#define UFLAG2_WINDOW		0x00001000	// c= window/arch/door can walk thru it
#define UFLAG2_WALL2		0x00002000	// d= another type of wall. (not sure why there are 2)
#define UFLAG2_A			0x00004000	// e= article a
#define UFLAG2_AN			0x00008000	// f= article an
#define UFLAG3_DESCRIPTION  0x00010000	//10= descriptional tile. (Regions, professions, ...)
#define UFLAG3_TRANSPARENT	0x00020000	//11= Transparent (Is used for leaves and sails)
#define UFLAG3_CLOTH		0x00040000	//12= Probably dyeable ? effects the way the client colors the item. color gray scale stuff else must be converted to grayscale
#define UFLAG3_ZERO8		0x00080000	//13= 0 NOT USED (i checked)
#define UFLAG3_MAP			0x00100000	//14= map
#define UFLAG3_CONTAINER	0x00200000	//15= container.
#define UFLAG3_EQUIP2		0x00400000	//16= equipable (not sure why there are 2 of these)
#define UFLAG3_LIGHT		0x00800000	//17= light source
#define UFLAG4_ANIM			0x01000000	//18= animation with next several object frames.
#define UFLAG4_HOVEROVER	0x02000000  //19= item can be hovered over (SA tiledata) (older tiledata has this applied to archway, easel, fountain - unknown purpose)
#define UFLAG4_WALL3		0x04000000	//1a= tend to be types of walls ? I have no idea.
#define UFLAG4_BODYITEM		0x08000000	//1b= Whole body item (ex.British", "Blackthorne", "GM Robe" and "Death shroud")
#define UFLAG4_ROOF			0x10000000	//1c=
#define UFLAG4_DOOR			0x20000000	//1d= door
#define UFLAG4_STAIRS		0x40000000	//1e=
#define UFLAG4_WALKABLE		0x80000000	//1f= We can walk here.

	DWORD m_flags;
	BYTE m_weight;		// 255 = unmovable.
	BYTE m_layer;		// LAYER_TYPE for UFLAG1_EQUIP, UFLAG3_EQUIP2 or light index for UFLAG3_LIGHT
	DWORD m_dwUnk6;		// ? qty in the case of UFLAG2_STACKABLE, Spell icons use this as well.
	DWORD m_dwAnim;		// equipable items animation index. (50000 = male offset, 60000=female) Gump base as well
	WORD m_wUnk14;		// ?
	BYTE m_height;		// z height but may not be blocking. ex.UFLAG2_WINDOW
	char m_name[20];	// sometimes legit not to have a name
} PACK_NEEDED;

struct CUOItemTypeRec2	// size = 41 (tiledata.mul, High Seas+)
{
	DWORD m_flags;
	DWORD m_dwUnk5;		// ? new in HS
	BYTE m_weight;		// 255 = unmovable.
	BYTE m_layer;		// LAYER_TYPE for UFLAG1_EQUIP, UFLAG3_EQUIP2 or light index for UFLAG3_LIGHT
	DWORD m_dwUnk11;	// ? qty in the case of UFLAG2_STACKABLE, Spell icons use this as well.
	DWORD m_dwAnim;		// equipable items animation index. (50000 = male offset, 60000=female) Gump base as well
	WORD m_wUnk19;		// ?
	BYTE m_height;		// z height but may not be blocking. ex.UFLAG2_WINDOW
	char m_name[20];	// sometimes legit not to have a name
} PACK_NEEDED;

struct CGrayItemInfo : public CUOItemTypeRec2
{
	explicit CGrayItemInfo( ITEMID_TYPE id );

	static ITEMID_TYPE GetMaxTileDataItem();
};

struct CUOMultiItemRec // (Multi.mul)
{
	// Describe multi's like houses and boats. One single tile.
	// From Multi.Idx and Multi.mul files.
	WORD  m_wTileID;	// ITEMID_TYPE = Index to tile CUOItemTypeRec/CUOItemTypeRec2
	short m_dx;		// signed delta.
	short m_dy;
	short m_dz;
	DWORD m_visible;	// 0 or 1 (non-visible items are things like doors and signs)

	ITEMID_TYPE GetDispID() const
	{
		return static_cast<ITEMID_TYPE>(m_wTileID);
	}

} PACK_NEEDED;

struct CUOMultiItemRec2 // (Multi.mul, High Seas+)
{
	// Describe multi's like houses and boats. One single tile.
	// From Multi.Idx and Multi.mul files
	WORD  m_wTileID;	// ITEMID_TYPE = Index to tile CUOItemTypeRec/CUOItemTypeRec2
	short m_dx;			// signed delta.
	short m_dy;
	short m_dz;
	DWORD m_visible;	// 0 or 1 (non-visible items are things like doors and signs)
	DWORD m_unknown;	// unknown data

	ITEMID_TYPE GetDispID() const
	{
		return static_cast<ITEMID_TYPE>(m_wTileID);
	}
} PACK_NEEDED;

struct CUOHuesRec // (Hues.mul)
{
	short m_color[34];
	char m_name[20];

	BYTE GetRGB( int rgb ) const
	{
		short sColor = m_color[31];
		if ( rgb == 0 ) // R
			return static_cast<BYTE>(((sColor & 0x7C00) >> 7));
		else if ( rgb == 1 )
			return static_cast<BYTE>(((sColor & 0x3E0) >> 2));
		else if ( rgb == 3 )
			return static_cast<BYTE>(((sColor & 0x1F) << 3));

		return 0;
	}

} PACK_NEEDED;

#define LIGHT_BRIGHT	0
#define LIGHT_DARK		30
#define LIGHT_BLACK		32

// Turn off structure packing.
#if defined _WIN32 && (!__MINGW32__)
#pragma pack()
#endif


#endif // _INC_GRAYMUL_H
